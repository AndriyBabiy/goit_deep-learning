{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3235802,"sourceType":"datasetVersion","datasetId":1961542}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# 04 - Introduction to NLP - Email Spam Detection Classification","metadata":{}},{"cell_type":"code","source":"import os\nimport gc\nimport datetime\nimport re\nimport string\nimport itertools\nfrom collections import Counter\n\nimport pandas as pd\nimport numpy as np\n\nimport nltk\nnltk.download('stopwords')\nnltk.download('punkt')\n\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem.porter import PorterStemmer\n\nimport spacy\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.manifold import TSNE\nfrom sklearn.metrics import roc_auc_score, accuracy_score, f1_score, classification_report\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\nfrom tqdm.auto import tqdm\ntqdm.pandas()\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport seaborn as sns\n\nimport gensim\nfrom gensim.models import word2vec\nfrom gensim.models import KeyedVectors #  implements word vectors\nfrom gensim.test.utils import datapath, get_tmpfile\nfrom gensim.scripts.glove2word2vec import glove2word2vec","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.020351Z","iopub.execute_input":"2024-10-16T14:53:36.020739Z","iopub.status.idle":"2024-10-16T14:53:36.093736Z","shell.execute_reply.started":"2024-10-16T14:53:36.020706Z","shell.execute_reply":"2024-10-16T14:53:36.092801Z"}},"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n","output_type":"stream"}],"execution_count":155},{"cell_type":"markdown","source":"# Importing the necessary datasets","metadata":{}},{"cell_type":"code","source":"cols = ['v1', 'v2']\n\ndf = pd.read_csv('/kaggle/input/email-spam-detection-dataset-classification/spam.csv', encoding = \"ISO-8859-1\", usecols=cols)\n\ndf['classification'] = df['v1']\ndf['text'] = df['v2']\n\ndf = df.drop(['v1', 'v2'], axis=1)\n\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.095207Z","iopub.execute_input":"2024-10-16T14:53:36.095531Z","iopub.status.idle":"2024-10-16T14:53:36.127491Z","shell.execute_reply.started":"2024-10-16T14:53:36.095498Z","shell.execute_reply":"2024-10-16T14:53:36.126625Z"}},"outputs":[{"execution_count":156,"output_type":"execute_result","data":{"text/plain":"  classification                                               text\n0            ham  Go until jurong point, crazy.. Available only ...\n1            ham                      Ok lar... Joking wif u oni...\n2           spam  Free entry in 2 a wkly comp to win FA Cup fina...\n3            ham  U dun say so early hor... U c already then say...\n4            ham  Nah I don't think he goes to usf, he lives aro...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>classification</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ham</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ham</td>\n      <td>Ok lar... Joking wif u oni...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>spam</td>\n      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ham</td>\n      <td>U dun say so early hor... U c already then say...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ham</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":156},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.128497Z","iopub.execute_input":"2024-10-16T14:53:36.128787Z","iopub.status.idle":"2024-10-16T14:53:36.139035Z","shell.execute_reply.started":"2024-10-16T14:53:36.128755Z","shell.execute_reply":"2024-10-16T14:53:36.138146Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5572 entries, 0 to 5571\nData columns (total 2 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   classification  5572 non-null   object\n 1   text            5572 non-null   object\ndtypes: object(2)\nmemory usage: 87.2+ KB\n","output_type":"stream"}],"execution_count":157},{"cell_type":"markdown","source":"# Preparing the dataset","metadata":{}},{"cell_type":"code","source":"for i in df.columns:\n    print(f'unique in column {i} -> {len(df[i].unique())}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.140961Z","iopub.execute_input":"2024-10-16T14:53:36.141624Z","iopub.status.idle":"2024-10-16T14:53:36.156193Z","shell.execute_reply.started":"2024-10-16T14:53:36.141580Z","shell.execute_reply":"2024-10-16T14:53:36.155276Z"}},"outputs":[{"name":"stdout","text":"unique in column classification -> 2\nunique in column text -> 5169\n","output_type":"stream"}],"execution_count":158},{"cell_type":"code","source":"df.drop_duplicates().reset_index(drop=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.157828Z","iopub.execute_input":"2024-10-16T14:53:36.158424Z","iopub.status.idle":"2024-10-16T14:53:36.172733Z","shell.execute_reply.started":"2024-10-16T14:53:36.158377Z","shell.execute_reply":"2024-10-16T14:53:36.171922Z"}},"outputs":[{"execution_count":159,"output_type":"execute_result","data":{"text/plain":"     classification                                               text\n0               ham  Go until jurong point, crazy.. Available only ...\n1               ham                      Ok lar... Joking wif u oni...\n2              spam  Free entry in 2 a wkly comp to win FA Cup fina...\n3               ham  U dun say so early hor... U c already then say...\n4               ham  Nah I don't think he goes to usf, he lives aro...\n...             ...                                                ...\n5164           spam  This is the 2nd time we have tried 2 contact u...\n5165            ham              Will Ì_ b going to esplanade fr home?\n5166            ham  Pity, * was in mood for that. So...any other s...\n5167            ham  The guy did some bitching but I acted like i'd...\n5168            ham                         Rofl. Its true to its name\n\n[5169 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>classification</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ham</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ham</td>\n      <td>Ok lar... Joking wif u oni...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>spam</td>\n      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ham</td>\n      <td>U dun say so early hor... U c already then say...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ham</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5164</th>\n      <td>spam</td>\n      <td>This is the 2nd time we have tried 2 contact u...</td>\n    </tr>\n    <tr>\n      <th>5165</th>\n      <td>ham</td>\n      <td>Will Ì_ b going to esplanade fr home?</td>\n    </tr>\n    <tr>\n      <th>5166</th>\n      <td>ham</td>\n      <td>Pity, * was in mood for that. So...any other s...</td>\n    </tr>\n    <tr>\n      <th>5167</th>\n      <td>ham</td>\n      <td>The guy did some bitching but I acted like i'd...</td>\n    </tr>\n    <tr>\n      <th>5168</th>\n      <td>ham</td>\n      <td>Rofl. Its true to its name</td>\n    </tr>\n  </tbody>\n</table>\n<p>5169 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":159},{"cell_type":"code","source":"df.groupby('text').count().sort_values('classification', ascending=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.311826Z","iopub.execute_input":"2024-10-16T14:53:36.312091Z","iopub.status.idle":"2024-10-16T14:53:36.329953Z","shell.execute_reply.started":"2024-10-16T14:53:36.312062Z","shell.execute_reply":"2024-10-16T14:53:36.329118Z"}},"outputs":[{"execution_count":160,"output_type":"execute_result","data":{"text/plain":"                                                    classification\ntext                                                              \nSorry, I'll call later                                          30\nI cant pick the phone right now. Pls send a mes...              12\nOk...                                                           10\nSay this slowly.? GOD,I LOVE YOU &amp; I NEED Y...               4\nOkie                                                             4\n...                                                            ...\nI don't know, same thing that's wrong everyso o...               1\nI don't know jack shit about anything or i'd sa...               1\nI don't know but I'm raping dudes at poker                       1\nI don't have anybody's number, I still haven't ...               1\nI donno if they are scorable                                     1\n\n[5169 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>classification</th>\n    </tr>\n    <tr>\n      <th>text</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Sorry, I'll call later</th>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>I cant pick the phone right now. Pls send a message</th>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>Ok...</th>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>Say this slowly.? GOD,I LOVE YOU &amp;amp; I NEED YOU,CLEAN MY HEART WITH YOUR BLOOD.Send this to Ten special people &amp;amp; u c miracle tomorrow, do it,pls,pls do it...</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Okie</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>I don't know, same thing that's wrong everyso often, he panicks starts goin on bout not bein good enough Û_</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>I don't know jack shit about anything or i'd say/ask something helpful but if you want you can pretend that I did and just text me whatever in response to the hypotheticalhuagauahahuagahyuhagga</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>I don't know but I'm raping dudes at poker</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>I don't have anybody's number, I still haven't thought up a tactful way to ask alex</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>I donno if they are scorable</th>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5169 rows × 1 columns</p>\n</div>"},"metadata":{}}],"execution_count":160},{"cell_type":"code","source":"duplicated = df[df['text'].duplicated()]['text'].unique()\n\nprint(f'num duplicates -> {len(duplicated)}/n {pd.DataFrame(duplicated)}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.354507Z","iopub.execute_input":"2024-10-16T14:53:36.354773Z","iopub.status.idle":"2024-10-16T14:53:36.362370Z","shell.execute_reply.started":"2024-10-16T14:53:36.354745Z","shell.execute_reply":"2024-10-16T14:53:36.361522Z"}},"outputs":[{"name":"stdout","text":"num duplicates -> 281/n                                                      0\n0    As per your request 'Melle Melle (Oru Minnamin...\n1    As I entered my cabin my PA said, '' Happy B'd...\n2                               Sorry, I'll call later\n3                     No calls..messages..missed calls\n4    Congratulations ur awarded 500 of CD vouchers ...\n..                                                 ...\n276                            K. I will sent it again\n277  SMS SERVICES. for your inclusive text credits,...\n278                           I went to project centre\n279  You are awarded a SiPix Digital Camera! call 0...\n280  I know you are thinkin malaria. But relax, chi...\n\n[281 rows x 1 columns]\n","output_type":"stream"}],"execution_count":161},{"cell_type":"code","source":"df_dedupe_text = df[~df['text'].isin(duplicated)].reset_index(drop=True)\n\nprint(f'df -> {df.info()}')\nprint()\nprint(f'df_dedupe_text -> {df_dedupe_text.info()}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.408701Z","iopub.execute_input":"2024-10-16T14:53:36.408978Z","iopub.status.idle":"2024-10-16T14:53:36.426345Z","shell.execute_reply.started":"2024-10-16T14:53:36.408949Z","shell.execute_reply":"2024-10-16T14:53:36.425514Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5572 entries, 0 to 5571\nData columns (total 2 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   classification  5572 non-null   object\n 1   text            5572 non-null   object\ndtypes: object(2)\nmemory usage: 87.2+ KB\ndf -> None\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4888 entries, 0 to 4887\nData columns (total 2 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   classification  4888 non-null   object\n 1   text            4888 non-null   object\ndtypes: object(2)\nmemory usage: 76.5+ KB\ndf_dedupe_text -> None\n","output_type":"stream"}],"execution_count":162},{"cell_type":"code","source":"plt.subplot(1, 2, 1)\ndf['classification'].hist()\n\nplt.subplot(1, 2, 2)\ndf_dedupe_text['classification'].hist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.442871Z","iopub.execute_input":"2024-10-16T14:53:36.443368Z","iopub.status.idle":"2024-10-16T14:53:36.715048Z","shell.execute_reply.started":"2024-10-16T14:53:36.443335Z","shell.execute_reply":"2024-10-16T14:53:36.714141Z"}},"outputs":[{"execution_count":163,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":163},{"cell_type":"code","source":"# Contractions. Source http://stackoverflow.com/questions/19790188/expanding-english-language-contractions-in-python\n\ncontractions = {\n\"ain't\": \"am not\",\n\"aren't\": \"are not\",\n\"can't\": \"cannot\",\n\"can't've\": \"cannot have\",\n\"'cause\": \"because\",\n\"could've\": \"could have\",\n\"couldn't\": \"could not\",\n\"couldn't've\": \"could not have\",\n\"didn't\": \"did not\",\n\"doesn't\": \"does not\",\n\"don't\": \"do not\",\n\"hadn't\": \"had not\",\n\"hadn't've\": \"had not have\",\n\"hasn't\": \"has not\",\n\"haven't\": \"have not\",\n\"he'd\": \"he would\",\n\"he'd've\": \"he would have\",\n\"he'll\": \"he will\",\n\"he's\": \"he is\",\n\"how'd\": \"how did\",\n\"how'll\": \"how will\",\n\"how's\": \"how is\",\n\"i'd\": \"i would\",\n\"i'll\": \"i will\",\n\"i'm\": \"i am\",\n\"i've\": \"i have\",\n\"isn't\": \"is not\",\n\"it'd\": \"it would\",\n\"it'll\": \"it will\",\n\"it's\": \"it is\",\n\"let's\": \"let us\",\n\"ma'am\": \"madam\",\n\"mayn't\": \"may not\",\n\"might've\": \"might have\",\n\"mightn't\": \"might not\",\n\"must've\": \"must have\",\n\"mustn't\": \"must not\",\n\"needn't\": \"need not\",\n\"oughtn't\": \"ought not\",\n\"shan't\": \"shall not\",\n\"sha'n't\": \"shall not\",\n\"she'd\": \"she would\",\n\"she'll\": \"she will\",\n\"she's\": \"she is\",\n\"should've\": \"should have\",\n\"shouldn't\": \"should not\",\n\"that'd\": \"that would\",\n\"that's\": \"that is\",\n\"there'd\": \"there had\",\n\"there's\": \"there is\",\n\"they'd\": \"they would\",\n\"they'll\": \"they will\",\n\"they're\": \"they are\",\n\"they've\": \"they have\",\n\"wasn't\": \"was not\",\n\"we'd\": \"we would\",\n\"we'll\": \"we will\",\n\"we're\": \"we are\",\n\"we've\": \"we have\",\n\"weren't\": \"were not\",\n\"what'll\": \"what will\",\n\"what're\": \"what are\",\n\"what's\": \"what is\",\n\"what've\": \"what have\",\n\"where'd\": \"where did\",\n\"where's\": \"where is\",\n\"who'll\": \"who will\",\n\"who's\": \"who is\",\n\"won't\": \"will not\",\n\"wouldn't\": \"would not\",\n\"you'd\": \"you would\",\n\"you'll\": \"you will\",\n\"you're\": \"you are\"\n}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.716637Z","iopub.execute_input":"2024-10-16T14:53:36.716957Z","iopub.status.idle":"2024-10-16T14:53:36.726854Z","shell.execute_reply.started":"2024-10-16T14:53:36.716923Z","shell.execute_reply":"2024-10-16T14:53:36.725996Z"}},"outputs":[],"execution_count":164},{"cell_type":"code","source":"set(stopwords.words('english'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.727971Z","iopub.execute_input":"2024-10-16T14:53:36.728257Z","iopub.status.idle":"2024-10-16T14:53:36.745391Z","shell.execute_reply.started":"2024-10-16T14:53:36.728203Z","shell.execute_reply":"2024-10-16T14:53:36.744484Z"},"scrolled":true},"outputs":[{"execution_count":165,"output_type":"execute_result","data":{"text/plain":"{'a',\n 'about',\n 'above',\n 'after',\n 'again',\n 'against',\n 'ain',\n 'all',\n 'am',\n 'an',\n 'and',\n 'any',\n 'are',\n 'aren',\n \"aren't\",\n 'as',\n 'at',\n 'be',\n 'because',\n 'been',\n 'before',\n 'being',\n 'below',\n 'between',\n 'both',\n 'but',\n 'by',\n 'can',\n 'couldn',\n \"couldn't\",\n 'd',\n 'did',\n 'didn',\n \"didn't\",\n 'do',\n 'does',\n 'doesn',\n \"doesn't\",\n 'doing',\n 'don',\n \"don't\",\n 'down',\n 'during',\n 'each',\n 'few',\n 'for',\n 'from',\n 'further',\n 'had',\n 'hadn',\n \"hadn't\",\n 'has',\n 'hasn',\n \"hasn't\",\n 'have',\n 'haven',\n \"haven't\",\n 'having',\n 'he',\n 'her',\n 'here',\n 'hers',\n 'herself',\n 'him',\n 'himself',\n 'his',\n 'how',\n 'i',\n 'if',\n 'in',\n 'into',\n 'is',\n 'isn',\n \"isn't\",\n 'it',\n \"it's\",\n 'its',\n 'itself',\n 'just',\n 'll',\n 'm',\n 'ma',\n 'me',\n 'mightn',\n \"mightn't\",\n 'more',\n 'most',\n 'mustn',\n \"mustn't\",\n 'my',\n 'myself',\n 'needn',\n \"needn't\",\n 'no',\n 'nor',\n 'not',\n 'now',\n 'o',\n 'of',\n 'off',\n 'on',\n 'once',\n 'only',\n 'or',\n 'other',\n 'our',\n 'ours',\n 'ourselves',\n 'out',\n 'over',\n 'own',\n 're',\n 's',\n 'same',\n 'shan',\n \"shan't\",\n 'she',\n \"she's\",\n 'should',\n \"should've\",\n 'shouldn',\n \"shouldn't\",\n 'so',\n 'some',\n 'such',\n 't',\n 'than',\n 'that',\n \"that'll\",\n 'the',\n 'their',\n 'theirs',\n 'them',\n 'themselves',\n 'then',\n 'there',\n 'these',\n 'they',\n 'this',\n 'those',\n 'through',\n 'to',\n 'too',\n 'under',\n 'until',\n 'up',\n 've',\n 'very',\n 'was',\n 'wasn',\n \"wasn't\",\n 'we',\n 'were',\n 'weren',\n \"weren't\",\n 'what',\n 'when',\n 'where',\n 'which',\n 'while',\n 'who',\n 'whom',\n 'why',\n 'will',\n 'with',\n 'won',\n \"won't\",\n 'wouldn',\n \"wouldn't\",\n 'y',\n 'you',\n \"you'd\",\n \"you'll\",\n \"you're\",\n \"you've\",\n 'your',\n 'yours',\n 'yourself',\n 'yourselves'}"},"metadata":{}}],"execution_count":165},{"cell_type":"code","source":"stop_words = set(stopwords.words('english')).union({'also', 'would', 'much', 'many'})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.747322Z","iopub.execute_input":"2024-10-16T14:53:36.747613Z","iopub.status.idle":"2024-10-16T14:53:36.753420Z","shell.execute_reply.started":"2024-10-16T14:53:36.747579Z","shell.execute_reply":"2024-10-16T14:53:36.752739Z"}},"outputs":[],"execution_count":166},{"cell_type":"code","source":"negations = {\n    'aren',\n    \"aren't\",\n    'couldn',\n    \"couldn't\",\n    'didn',\n    \"didn't\",\n    'doesn',\n    \"doesn't\",\n    'don',\n    \"don't\",\n    'hadn',\n    \"hadn't\",\n    'hasn',\n    \"hasn't\",\n    'haven',\n    \"haven't\",\n    'isn',\n    \"isn't\",\n    'mightn',\n    \"mightn't\",\n    'mustn',\n    \"mustn't\",\n    'needn',\n    \"needn't\",\n    'no',\n    'nor',\n    'not',\n    'shan',\n    \"shan't\",\n    'shouldn',\n    \"shouldn't\",\n    'wasn',\n    \"wasn't\",\n    'weren',\n    \"weren't\",\n    'won',\n    \"won't\",\n    'wouldn',\n    \"wouldn't\"\n}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.754345Z","iopub.execute_input":"2024-10-16T14:53:36.754597Z","iopub.status.idle":"2024-10-16T14:53:36.765992Z","shell.execute_reply.started":"2024-10-16T14:53:36.754569Z","shell.execute_reply":"2024-10-16T14:53:36.765186Z"}},"outputs":[],"execution_count":167},{"cell_type":"code","source":"# removing negations from the stop-words list\n\nstop_words = stop_words.difference(negations)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.767022Z","iopub.execute_input":"2024-10-16T14:53:36.767389Z","iopub.status.idle":"2024-10-16T14:53:36.777564Z","shell.execute_reply.started":"2024-10-16T14:53:36.767346Z","shell.execute_reply":"2024-10-16T14:53:36.776719Z"}},"outputs":[],"execution_count":168},{"cell_type":"code","source":"stemmer = PorterStemmer()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.778471Z","iopub.execute_input":"2024-10-16T14:53:36.778756Z","iopub.status.idle":"2024-10-16T14:53:36.786965Z","shell.execute_reply.started":"2024-10-16T14:53:36.778720Z","shell.execute_reply":"2024-10-16T14:53:36.786113Z"}},"outputs":[],"execution_count":169},{"cell_type":"code","source":"!python -m spacy download en_core_web_sm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:36.788059Z","iopub.execute_input":"2024-10-16T14:53:36.788405Z","iopub.status.idle":"2024-10-16T14:53:53.863982Z","shell.execute_reply.started":"2024-10-16T14:53:36.788374Z","shell.execute_reply":"2024-10-16T14:53:53.862859Z"}},"outputs":[{"name":"stdout","text":"Collecting en-core-web-sm==3.7.1\n  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.7.1/en_core_web_sm-3.7.1-py3-none-any.whl (12.8 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.8/12.8 MB\u001b[0m \u001b[31m78.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: spacy<3.8.0,>=3.7.2 in /opt/conda/lib/python3.10/site-packages (from en-core-web-sm==3.7.1) (3.7.6)\nRequirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.0.12)\nRequirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.0.5)\nRequirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.0.10)\nRequirement already satisfied: cymem<2.1.0,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.0.8)\nRequirement already satisfied: preshed<3.1.0,>=3.0.2 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.0.9)\nRequirement already satisfied: thinc<8.3.0,>=8.2.2 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (8.2.5)\nRequirement already satisfied: wasabi<1.2.0,>=0.9.1 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.1.2)\nRequirement already satisfied: srsly<3.0.0,>=2.4.3 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.4.8)\nRequirement already satisfied: catalogue<2.1.0,>=2.0.6 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.0.10)\nRequirement already satisfied: weasel<0.5.0,>=0.1.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.4.1)\nRequirement already satisfied: typer<1.0.0,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.12.3)\nRequirement already satisfied: tqdm<5.0.0,>=4.38.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (4.66.4)\nRequirement already satisfied: requests<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.32.3)\nRequirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.9.2)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.1.4)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (70.0.0)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (21.3)\nRequirement already satisfied: langcodes<4.0.0,>=3.2.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.4.1)\nRequirement already satisfied: numpy>=1.19.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.26.4)\nRequirement already satisfied: language-data>=1.2 in /opt/conda/lib/python3.10/site-packages (from langcodes<4.0.0,>=3.2.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.2.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.1.2)\nRequirement already satisfied: annotated-types>=0.6.0 in /opt/conda/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.7.0)\nRequirement already satisfied: pydantic-core==2.23.4 in /opt/conda/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.23.4)\nRequirement already satisfied: typing-extensions>=4.6.1 in /opt/conda/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (4.12.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2024.8.30)\nRequirement already satisfied: blis<0.8.0,>=0.7.8 in /opt/conda/lib/python3.10/site-packages (from thinc<8.3.0,>=8.2.2->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.7.10)\nRequirement already satisfied: confection<1.0.0,>=0.0.1 in /opt/conda/lib/python3.10/site-packages (from thinc<8.3.0,>=8.2.2->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.1.4)\nRequirement already satisfied: click>=8.0.0 in /opt/conda/lib/python3.10/site-packages (from typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (8.1.7)\nRequirement already satisfied: shellingham>=1.3.0 in /opt/conda/lib/python3.10/site-packages (from typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.5.4)\nRequirement already satisfied: rich>=10.11.0 in /opt/conda/lib/python3.10/site-packages (from typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (13.7.1)\nRequirement already satisfied: cloudpathlib<1.0.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from weasel<0.5.0,>=0.1.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.19.0)\nRequirement already satisfied: smart-open<8.0.0,>=5.2.1 in /opt/conda/lib/python3.10/site-packages (from weasel<0.5.0,>=0.1.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (7.0.4)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.1.5)\nRequirement already satisfied: marisa-trie>=0.7.7 in /opt/conda/lib/python3.10/site-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.1.0)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (2.18.0)\nRequirement already satisfied: wrapt in /opt/conda/lib/python3.10/site-packages (from smart-open<8.0.0,>=5.2.1->weasel<0.5.0,>=0.1.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (1.16.0)\nRequirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy<3.8.0,>=3.7.2->en-core-web-sm==3.7.1) (0.1.2)\n\u001b[38;5;2m✔ Download and installation successful\u001b[0m\nYou can now load the package via spacy.load('en_core_web_sm')\n","output_type":"stream"}],"execution_count":170},{"cell_type":"code","source":"nlp = spacy.load(\"en_core_web_sm\", disable = ['parser','ner'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:53.865377Z","iopub.execute_input":"2024-10-16T14:53:53.865700Z","iopub.status.idle":"2024-10-16T14:53:54.872872Z","shell.execute_reply.started":"2024-10-16T14:53:53.865663Z","shell.execute_reply":"2024-10-16T14:53:54.872053Z"}},"outputs":[],"execution_count":171},{"cell_type":"code","source":"# function to clean text\ndef normalize_text(raw_review):\n\n    # Remove html tags\n    text = re.sub(\"<[^>]*>\", \" \", raw_review) # match <> and everything in between. [^>] - match everything except >\n\n    # Remove emails\n    text = re.sub(\"\\S*@\\S*[\\s]+\", \" \", text) # match non-whitespace characters, @ and a whitespaces in the end\n\n    # remove links\n    text = re.sub(\"https?:\\/\\/.*?[\\s]+\", \" \", text) # match http, s - zero or once, //,\n                                                    # any char 0-unlimited, whitespaces in the end\n\n     # Convert to lower case, split into individual words\n    text = text.lower().split()\n\n    # Replace contractions with their full versions\n    text = [contractions.get(word) if word in contractions else word\n            for word in text]\n\n    # Re-splitting for the correct stop-words extraction\n    text = \" \".join(text).split()\n\n    # Remove stop words\n    text = [word for word in text if not word in stop_words]\n\n    text = \" \".join(text)\n\n    # Remove non-letters\n    text = re.sub(\"[^a-zA-Z' ]\", \"\", text) # match everything except letters and '\n\n\n    # Stem words. Need to define porter stemmer above\n    # text = [stemmer.stem(word) for word in text.split()]\n\n    # Lemmatize words. Need to define lemmatizer above\n    doc = nlp(text)\n    text = \" \".join([token.lemma_ for token in doc if len(token.lemma_) > 1 ])\n\n    # Remove excesive whitespaces\n    text = re.sub(\"[\\s]+\", \" \", text)\n\n    # Join the words back into one string separated by space, and return the result.\n    return text","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:54.876400Z","iopub.execute_input":"2024-10-16T14:53:54.876718Z","iopub.status.idle":"2024-10-16T14:53:54.885139Z","shell.execute_reply.started":"2024-10-16T14:53:54.876685Z","shell.execute_reply":"2024-10-16T14:53:54.884260Z"}},"outputs":[],"execution_count":172},{"cell_type":"code","source":"text = df['text'][0]\n\n# Remove html tags\ntext = re.sub(\"<[^>]*>\", \" \", text) # match <> and everything in between. [^>] - match everything except >\n\n# Remove emails\ntext = re.sub(\"\\S*@\\S*[\\s]+\", \" \", text) # match non-whitespace characters, @ and a whitespaces in the end\n\n# remove links\ntext = re.sub(\"https?:\\/\\/.*?[\\s]+\", \" \", text) # match http, s - zero or once, //,\n                                                # any char 0-unlimited, whitespaces in the end\n\n # Convert to lower case, split into individual words\ntext = text.lower().split()\n\n# Replace contractions with their full versions\ntext = [contractions.get(word) if word in contractions else word\n        for word in text]\n\n# Re-splitting for the correct stop-words extraction\ntext = \" \".join(text).split()\n\n# Remove stop words\ntext = [word for word in text if not word in stop_words]\n\ntext = \" \".join(text)\n\n# Remove non-letters\ntext = re.sub(\"[^a-zA-Z' ]\", \"\", text) # match everything except letters and '\n\n\n# Stem words. Need to define porter stemmer above\n# text = [stemmer.stem(word) for word in text.split()]\n\n# Lemmatize words. Need to define lemmatizer above\ndoc = nlp(text)\ntext = \" \".join([token.lemma_ for token in doc if len(token.lemma_) > 1 ])\n\n# Remove excesive whitespaces\ntext = re.sub(\"[\\s]+\", \" \", text)\n\ntext","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:54.886138Z","iopub.execute_input":"2024-10-16T14:53:54.886456Z","iopub.status.idle":"2024-10-16T14:53:54.910147Z","shell.execute_reply.started":"2024-10-16T14:53:54.886419Z","shell.execute_reply":"2024-10-16T14:53:54.909183Z"}},"outputs":[{"execution_count":173,"output_type":"execute_result","data":{"text/plain":"'go jurong point crazy available bugis great world la buffet cine get amore wat'"},"metadata":{}}],"execution_count":173},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:54.911161Z","iopub.execute_input":"2024-10-16T14:53:54.911494Z","iopub.status.idle":"2024-10-16T14:53:54.922005Z","shell.execute_reply.started":"2024-10-16T14:53:54.911461Z","shell.execute_reply":"2024-10-16T14:53:54.921137Z"}},"outputs":[{"execution_count":174,"output_type":"execute_result","data":{"text/plain":"  classification                                               text\n0            ham  Go until jurong point, crazy.. Available only ...\n1            ham                      Ok lar... Joking wif u oni...\n2           spam  Free entry in 2 a wkly comp to win FA Cup fina...\n3            ham  U dun say so early hor... U c already then say...\n4            ham  Nah I don't think he goes to usf, he lives aro...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>classification</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ham</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ham</td>\n      <td>Ok lar... Joking wif u oni...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>spam</td>\n      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ham</td>\n      <td>U dun say so early hor... U c already then say...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ham</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":174},{"cell_type":"code","source":"def normalize_text(text):\n     # Remove html tags\n    text = re.sub(\"<[^>]*>\", \" \", text) # match <> and everything in between. [^>] - match everything except >\n    \n    # Remove emails\n    text = re.sub(\"\\S*@\\S*[\\s]+\", \" \", text) # match non-whitespace characters, @ and a whitespaces in the end\n    \n    # remove links\n    text = re.sub(\"https?:\\/\\/.*?[\\s]+\", \" \", text) # match http, s - zero or once, //,\n                                                    # any char 0-unlimited, whitespaces in the end\n    \n     # Convert to lower case, split into individual words\n    text = text.lower().split()\n    \n    # Replace contractions with their full versions\n    text = [contractions.get(word) if word in contractions else word\n            for word in text]\n    \n    # Re-splitting for the correct stop-words extraction\n    text = \" \".join(text).split()\n    \n    # Remove stop words\n    text = [word for word in text if not word in stop_words]\n    \n    text = \" \".join(text)\n    \n    # Remove non-letters\n    text = re.sub(\"[^a-zA-Z' ]\", \"\", text) # match everything except letters and '\n    \n    \n    # Stem words. Need to define porter stemmer above\n    # text = [stemmer.stem(word) for word in text.split()]\n    \n    # Lemmatize words. Need to define lemmatizer above\n    doc = nlp(text)\n    text = \" \".join([token.lemma_ for token in doc if len(token.lemma_) > 1 ])\n    \n    # Remove excesive whitespaces\n    text = re.sub(\"[\\s]+\", \" \", text)\n\n    return text","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:54.923205Z","iopub.execute_input":"2024-10-16T14:53:54.923515Z","iopub.status.idle":"2024-10-16T14:53:54.931798Z","shell.execute_reply.started":"2024-10-16T14:53:54.923484Z","shell.execute_reply":"2024-10-16T14:53:54.930977Z"}},"outputs":[],"execution_count":175},{"cell_type":"code","source":"df['text_normalized'] = ''\n\nfor idx, val in enumerate(df['text']):\n    df.loc[idx, \"text_normalized\"] = normalize_text(df['text'][idx])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:53:54.932900Z","iopub.execute_input":"2024-10-16T14:53:54.933308Z","iopub.status.idle":"2024-10-16T14:54:13.570229Z","shell.execute_reply.started":"2024-10-16T14:53:54.933266Z","shell.execute_reply":"2024-10-16T14:54:13.569182Z"}},"outputs":[],"execution_count":176},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:13.571379Z","iopub.execute_input":"2024-10-16T14:54:13.571696Z","iopub.status.idle":"2024-10-16T14:54:13.581232Z","shell.execute_reply.started":"2024-10-16T14:54:13.571662Z","shell.execute_reply":"2024-10-16T14:54:13.580349Z"}},"outputs":[{"execution_count":177,"output_type":"execute_result","data":{"text/plain":"  classification                                               text  \\\n0            ham  Go until jurong point, crazy.. Available only ...   \n1            ham                      Ok lar... Joking wif u oni...   \n2           spam  Free entry in 2 a wkly comp to win FA Cup fina...   \n3            ham  U dun say so early hor... U c already then say...   \n4            ham  Nah I don't think he goes to usf, he lives aro...   \n\n                                     text_normalized  \n0  go jurong point crazy available bugis great wo...  \n1                                ok lar joke wif oni  \n2  free entry wkly comp win fa cup final tkts st ...  \n3                      dun say early hor already say  \n4            nah not think go usf live around though  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>classification</th>\n      <th>text</th>\n      <th>text_normalized</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ham</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n      <td>go jurong point crazy available bugis great wo...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ham</td>\n      <td>Ok lar... Joking wif u oni...</td>\n      <td>ok lar joke wif oni</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>spam</td>\n      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n      <td>free entry wkly comp win fa cup final tkts st ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ham</td>\n      <td>U dun say so early hor... U c already then say...</td>\n      <td>dun say early hor already say</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ham</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n      <td>nah not think go usf live around though</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":177},{"cell_type":"code","source":"df_dedupe_text.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:13.582365Z","iopub.execute_input":"2024-10-16T14:54:13.582647Z","iopub.status.idle":"2024-10-16T14:54:13.594267Z","shell.execute_reply.started":"2024-10-16T14:54:13.582616Z","shell.execute_reply":"2024-10-16T14:54:13.593445Z"}},"outputs":[{"execution_count":178,"output_type":"execute_result","data":{"text/plain":"  classification                                               text\n0            ham  Go until jurong point, crazy.. Available only ...\n1            ham                      Ok lar... Joking wif u oni...\n2            ham  U dun say so early hor... U c already then say...\n3            ham  Nah I don't think he goes to usf, he lives aro...\n4           spam  FreeMsg Hey there darling it's been 3 week's n...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>classification</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ham</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ham</td>\n      <td>Ok lar... Joking wif u oni...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ham</td>\n      <td>U dun say so early hor... U c already then say...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ham</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>spam</td>\n      <td>FreeMsg Hey there darling it's been 3 week's n...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":178},{"cell_type":"code","source":"df_dedupe_text['text_normalized'] = ''\n\nfor idx, val in enumerate(df_dedupe_text['text']):\n    df_dedupe_text.loc[idx, \"text_normalized\"] = normalize_text(df_dedupe_text['text'][idx])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:13.595337Z","iopub.execute_input":"2024-10-16T14:54:13.595622Z","iopub.status.idle":"2024-10-16T14:54:28.459181Z","shell.execute_reply.started":"2024-10-16T14:54:13.595591Z","shell.execute_reply":"2024-10-16T14:54:28.458385Z"}},"outputs":[],"execution_count":179},{"cell_type":"code","source":"df_dedupe_text.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:28.460404Z","iopub.execute_input":"2024-10-16T14:54:28.460762Z","iopub.status.idle":"2024-10-16T14:54:28.470146Z","shell.execute_reply.started":"2024-10-16T14:54:28.460727Z","shell.execute_reply":"2024-10-16T14:54:28.469293Z"}},"outputs":[{"execution_count":180,"output_type":"execute_result","data":{"text/plain":"  classification                                               text  \\\n0            ham  Go until jurong point, crazy.. Available only ...   \n1            ham                      Ok lar... Joking wif u oni...   \n2            ham  U dun say so early hor... U c already then say...   \n3            ham  Nah I don't think he goes to usf, he lives aro...   \n4           spam  FreeMsg Hey there darling it's been 3 week's n...   \n\n                                     text_normalized  \n0  go jurong point crazy available bugis great wo...  \n1                                ok lar joke wif oni  \n2                      dun say early hor already say  \n3            nah not think go usf live around though  \n4  freemsg hey darling week 's no word back like ...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>classification</th>\n      <th>text</th>\n      <th>text_normalized</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ham</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n      <td>go jurong point crazy available bugis great wo...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ham</td>\n      <td>Ok lar... Joking wif u oni...</td>\n      <td>ok lar joke wif oni</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ham</td>\n      <td>U dun say so early hor... U c already then say...</td>\n      <td>dun say early hor already say</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ham</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n      <td>nah not think go usf live around though</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>spam</td>\n      <td>FreeMsg Hey there darling it's been 3 week's n...</td>\n      <td>freemsg hey darling week 's no word back like ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":180},{"cell_type":"code","source":"def classify_target(df):\n    df['spam'] = df['classification'].apply(lambda x: 1 if x == 'spam' else 0)\n    return df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:28.471430Z","iopub.execute_input":"2024-10-16T14:54:28.471815Z","iopub.status.idle":"2024-10-16T14:54:28.481233Z","shell.execute_reply.started":"2024-10-16T14:54:28.471770Z","shell.execute_reply":"2024-10-16T14:54:28.480460Z"}},"outputs":[],"execution_count":181},{"cell_type":"code","source":"df = classify_target(df)\ndf_dedupe_text = classify_target(df_dedupe_text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:28.482402Z","iopub.execute_input":"2024-10-16T14:54:28.482719Z","iopub.status.idle":"2024-10-16T14:54:28.500010Z","shell.execute_reply.started":"2024-10-16T14:54:28.482679Z","shell.execute_reply":"2024-10-16T14:54:28.499321Z"}},"outputs":[],"execution_count":182},{"cell_type":"code","source":"df_dedupe_text","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:28.501063Z","iopub.execute_input":"2024-10-16T14:54:28.501420Z","iopub.status.idle":"2024-10-16T14:54:28.522321Z","shell.execute_reply.started":"2024-10-16T14:54:28.501369Z","shell.execute_reply":"2024-10-16T14:54:28.521525Z"}},"outputs":[{"execution_count":183,"output_type":"execute_result","data":{"text/plain":"     classification                                               text  \\\n0               ham  Go until jurong point, crazy.. Available only ...   \n1               ham                      Ok lar... Joking wif u oni...   \n2               ham  U dun say so early hor... U c already then say...   \n3               ham  Nah I don't think he goes to usf, he lives aro...   \n4              spam  FreeMsg Hey there darling it's been 3 week's n...   \n...             ...                                                ...   \n4883           spam  This is the 2nd time we have tried 2 contact u...   \n4884            ham              Will Ì_ b going to esplanade fr home?   \n4885            ham  Pity, * was in mood for that. So...any other s...   \n4886            ham  The guy did some bitching but I acted like i'd...   \n4887            ham                         Rofl. Its true to its name   \n\n                                        text_normalized  spam  \n0     go jurong point crazy available bugis great wo...     0  \n1                                   ok lar joke wif oni     0  \n2                         dun say early hor already say     0  \n3               nah not think go usf live around though     0  \n4     freemsg hey darling week 's no word back like ...     1  \n...                                                 ...   ...  \n4883  nd time try contact win pound prize claim easy...     1  \n4884                               go esplanade fr home     0  \n4885                    pity mood that soany suggestion     0  \n4886  guy bitching act like interested buy something...     0  \n4887                                     rofl true name     0  \n\n[4888 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>classification</th>\n      <th>text</th>\n      <th>text_normalized</th>\n      <th>spam</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ham</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n      <td>go jurong point crazy available bugis great wo...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ham</td>\n      <td>Ok lar... Joking wif u oni...</td>\n      <td>ok lar joke wif oni</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ham</td>\n      <td>U dun say so early hor... U c already then say...</td>\n      <td>dun say early hor already say</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ham</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n      <td>nah not think go usf live around though</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>spam</td>\n      <td>FreeMsg Hey there darling it's been 3 week's n...</td>\n      <td>freemsg hey darling week 's no word back like ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4883</th>\n      <td>spam</td>\n      <td>This is the 2nd time we have tried 2 contact u...</td>\n      <td>nd time try contact win pound prize claim easy...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4884</th>\n      <td>ham</td>\n      <td>Will Ì_ b going to esplanade fr home?</td>\n      <td>go esplanade fr home</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4885</th>\n      <td>ham</td>\n      <td>Pity, * was in mood for that. So...any other s...</td>\n      <td>pity mood that soany suggestion</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4886</th>\n      <td>ham</td>\n      <td>The guy did some bitching but I acted like i'd...</td>\n      <td>guy bitching act like interested buy something...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4887</th>\n      <td>ham</td>\n      <td>Rofl. Its true to its name</td>\n      <td>rofl true name</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4888 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":183},{"cell_type":"markdown","source":"## Splitting the data into training and test","metadata":{}},{"cell_type":"code","source":"train_idxs = df.sample(frac=0.8, random_state=42).index\ntest_idxs = [idx for idx in df.index if idx not in train_idxs]\n\nprint('train ->', len(train_idxs))\nprint('test ->', len(test_idxs))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:28.523581Z","iopub.execute_input":"2024-10-16T14:54:28.523958Z","iopub.status.idle":"2024-10-16T14:54:28.541159Z","shell.execute_reply.started":"2024-10-16T14:54:28.523916Z","shell.execute_reply":"2024-10-16T14:54:28.540290Z"}},"outputs":[{"name":"stdout","text":"train -> 4458\ntest -> 1114\n","output_type":"stream"}],"execution_count":184},{"cell_type":"code","source":"df = df\n\nX_train = df.loc[train_idxs, 'text_normalized']\nX_test = df.loc[test_idxs, 'text_normalized']\n\ny_train = df.loc[train_idxs, 'classification']\ny_test = df.loc[test_idxs, 'classification']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:28.542186Z","iopub.execute_input":"2024-10-16T14:54:28.542507Z","iopub.status.idle":"2024-10-16T14:54:28.553076Z","shell.execute_reply.started":"2024-10-16T14:54:28.542477Z","shell.execute_reply":"2024-10-16T14:54:28.552249Z"}},"outputs":[],"execution_count":185},{"cell_type":"markdown","source":"# Implementing the BoW and TF-IDF methods","metadata":{}},{"cell_type":"code","source":"bow_vect = CountVectorizer().fit(X_train)\n\nlen(bow_vect.vocabulary_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:28.554380Z","iopub.execute_input":"2024-10-16T14:54:28.554664Z","iopub.status.idle":"2024-10-16T14:54:28.632258Z","shell.execute_reply.started":"2024-10-16T14:54:28.554634Z","shell.execute_reply":"2024-10-16T14:54:28.631454Z"}},"outputs":[{"execution_count":186,"output_type":"execute_result","data":{"text/plain":"6459"},"metadata":{}}],"execution_count":186},{"cell_type":"code","source":"tfidf_vect = TfidfVectorizer().fit(X_train)\n\nlen(tfidf_vect.vocabulary_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:28.633334Z","iopub.execute_input":"2024-10-16T14:54:28.633688Z","iopub.status.idle":"2024-10-16T14:54:28.712061Z","shell.execute_reply.started":"2024-10-16T14:54:28.633654Z","shell.execute_reply":"2024-10-16T14:54:28.711144Z"}},"outputs":[{"execution_count":187,"output_type":"execute_result","data":{"text/plain":"6459"},"metadata":{}}],"execution_count":187},{"cell_type":"code","source":"def get_preds(df, text_column, algorithm, ngrams=(1, 1)):\n    X_train, X_test, y_train, y_test = train_test_split(df[text_column], \n                                                        df.spam, \n                                                        test_size=0.2, \n                                                        stratify=df['spam'], random_state=42)\n    \n    if algorithm == 'cv':\n        vect = CountVectorizer(ngram_range=(ngrams)).fit(X_train)\n    elif algorithm == 'tfidf':\n        vect = TfidfVectorizer(ngram_range=(ngrams)).fit(X_train)\n    else:\n        raise ValueError(\"Select correct algorithm: 'cv' or 'tfidf'\")\n\n    print('Vocabulary length: ', len(vect.vocabulary_))\n\n    # transform the documents in the training data to a documnet-term matrix\n\n    X_train_vectorized = vect.transform(X_train)\n    print('Document-term matrix shape: ', X_train_vectorized.shape)\n\n    model = LogisticRegression(random_state = 42)\n    model.fit(X_train_vectorized, y_train)\n\n    predictions = model.predict(vect.transform(X_test))\n\n    print(f'Used algorithm: {algorithm}')\n    print('AUC: ', roc_auc_score(y_test, predictions))\n    print('Accuracy: ', accuracy_score(y_test, predictions))\n    print('F1-score: ', f1_score(y_test, predictions))\n    print(classification_report(y_test, predictions))\n\n    return(predictions)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:28.713263Z","iopub.execute_input":"2024-10-16T14:54:28.713564Z","iopub.status.idle":"2024-10-16T14:54:28.722701Z","shell.execute_reply.started":"2024-10-16T14:54:28.713533Z","shell.execute_reply":"2024-10-16T14:54:28.721676Z"}},"outputs":[],"execution_count":188},{"cell_type":"code","source":"print(\"get_preds(df, 'text', 'cv')\")\ndf_dedupe_pred_bow_text = get_preds(df, 'text', 'cv')\nprint()\nprint(\"get_preds(df, 'text', 'cv', (1,2))\")\ndf_dedupe_pred_bow_text_1_2 = get_preds(df, 'text', 'cv', (1,2))\nprint()\nprint(\"get_preds(df, 'text', 'cv', (2,2))\")\ndf_dedupe_pred_bow_text_2_2 = get_preds(df, 'text', 'cv', (2,2))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:28.723709Z","iopub.execute_input":"2024-10-16T14:54:28.723999Z","iopub.status.idle":"2024-10-16T14:54:33.147673Z","shell.execute_reply.started":"2024-10-16T14:54:28.723968Z","shell.execute_reply":"2024-10-16T14:54:33.146719Z"}},"outputs":[{"name":"stdout","text":"get_preds(df, 'text', 'cv')\nVocabulary length:  7701\nDocument-term matrix shape:  (4457, 7701)\nUsed algorithm: cv\nAUC:  0.9323683076965832\nAccuracy:  0.9811659192825112\nF1-score:  0.9247311827956989\n              precision    recall  f1-score   support\n\n           0       0.98      1.00      0.99       966\n           1       0.99      0.87      0.92       149\n\n    accuracy                           0.98      1115\n   macro avg       0.99      0.93      0.96      1115\nweighted avg       0.98      0.98      0.98      1115\n\n\nget_preds(df, 'text', 'cv', (1,2))\nVocabulary length:  42874\nDocument-term matrix shape:  (4457, 42874)\nUsed algorithm: cv\nAUC:  0.9223011936026233\nAccuracy:  0.97847533632287\nF1-score:  0.9130434782608696\n              precision    recall  f1-score   support\n\n           0       0.98      1.00      0.99       966\n           1       0.99      0.85      0.91       149\n\n    accuracy                           0.98      1115\n   macro avg       0.98      0.92      0.95      1115\nweighted avg       0.98      0.98      0.98      1115\n\n\nget_preds(df, 'text', 'cv', (2,2))\nVocabulary length:  35173\nDocument-term matrix shape:  (4457, 35173)\nUsed algorithm: cv\nAUC:  0.8288590604026846\nAccuracy:  0.9542600896860987\nF1-score:  0.7935222672064777\n              precision    recall  f1-score   support\n\n           0       0.95      1.00      0.97       966\n           1       1.00      0.66      0.79       149\n\n    accuracy                           0.95      1115\n   macro avg       0.97      0.83      0.88      1115\nweighted avg       0.96      0.95      0.95      1115\n\n","output_type":"stream"}],"execution_count":189},{"cell_type":"code","source":"print(\"get_preds(df_dedupe_text, 'text', 'cv')\")\ndf_dedupe_pred_bow_text = get_preds(df_dedupe_text, 'text', 'cv')\nprint()\nprint(\"get_preds(df_dedupe_text, 'text', 'cv', (1,2))\")\ndf_dedupe_pred_bow_text_1_2 = get_preds(df_dedupe_text, 'text', 'cv', (1,2))\nprint()\nprint(\"get_preds(df_dedupe_text, 'text', 'cv', (2,2))\")\ndf_dedupe_pred_bow_text_2_2 = get_preds(df_dedupe_text, 'text', 'cv', (2,2))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:33.153398Z","iopub.execute_input":"2024-10-16T14:54:33.153722Z","iopub.status.idle":"2024-10-16T14:54:36.771208Z","shell.execute_reply.started":"2024-10-16T14:54:33.153689Z","shell.execute_reply":"2024-10-16T14:54:36.768010Z"}},"outputs":[{"name":"stdout","text":"get_preds(df_dedupe_text, 'text', 'cv')\nVocabulary length:  7230\nDocument-term matrix shape:  (3910, 7230)\nUsed algorithm: cv\nAUC:  0.9242007263798659\nAccuracy:  0.9815950920245399\nF1-score:  0.9142857142857144\n              precision    recall  f1-score   support\n\n           0       0.98      1.00      0.99       865\n           1       0.99      0.85      0.91       113\n\n    accuracy                           0.98       978\n   macro avg       0.99      0.92      0.95       978\nweighted avg       0.98      0.98      0.98       978\n\n\nget_preds(df_dedupe_text, 'text', 'cv', (1,2))\nVocabulary length:  40098\nDocument-term matrix shape:  (3910, 40098)\nUsed algorithm: cv\nAUC:  0.911504424778761\nAccuracy:  0.9795501022494888\nF1-score:  0.9029126213592232\n              precision    recall  f1-score   support\n\n           0       0.98      1.00      0.99       865\n           1       1.00      0.82      0.90       113\n\n    accuracy                           0.98       978\n   macro avg       0.99      0.91      0.95       978\nweighted avg       0.98      0.98      0.98       978\n\n\nget_preds(df_dedupe_text, 'text', 'cv', (2,2))\nVocabulary length:  32868\nDocument-term matrix shape:  (3910, 32868)\nUsed algorithm: cv\nAUC:  0.7654867256637168\nAccuracy:  0.9458077709611452\nF1-score:  0.6936416184971099\n              precision    recall  f1-score   support\n\n           0       0.94      1.00      0.97       865\n           1       1.00      0.53      0.69       113\n\n    accuracy                           0.95       978\n   macro avg       0.97      0.77      0.83       978\nweighted avg       0.95      0.95      0.94       978\n\n","output_type":"stream"}],"execution_count":190},{"cell_type":"code","source":"print(\"get_preds(df, 'text', 'tfidf')\")\ndf_dedupe_pred_bow_text = get_preds(df, 'text', 'tfidf')\nprint()\nprint(\"get_preds(df, 'text', 'tfidf', (1, 2))\")\ndf_dedupe_pred_bow_text_1_2 = get_preds(df, 'text', 'tfidf', (1, 2))\nprint()\nprint(\"get_preds(df, 'text', 'tfidf', (2, 2))\")\ndf_dedupe_pred_bow_text_2_2 = get_preds(df, 'text', 'tfidf', (2, 2))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:54:36.772706Z","iopub.execute_input":"2024-10-16T14:54:36.773069Z","iopub.status.idle":"2024-10-16T14:54:39.952132Z","shell.execute_reply.started":"2024-10-16T14:54:36.773025Z","shell.execute_reply":"2024-10-16T14:54:39.951314Z"}},"outputs":[{"name":"stdout","text":"get_preds(df, 'text', 'tfidf')\nVocabulary length:  7701\nDocument-term matrix shape:  (4457, 7701)\nUsed algorithm: tfidf\nAUC:  0.8988112607167174\nAccuracy:  0.9721973094170404\nF1-score:  0.8847583643122676\n              precision    recall  f1-score   support\n\n           0       0.97      1.00      0.98       966\n           1       0.99      0.80      0.88       149\n\n    accuracy                           0.97      1115\n   macro avg       0.98      0.90      0.93      1115\nweighted avg       0.97      0.97      0.97      1115\n\n\nget_preds(df, 'text', 'tfidf', (1, 2))\nVocabulary length:  42874\nDocument-term matrix shape:  (4457, 42874)\nUsed algorithm: tfidf\nAUC:  0.8686099184348383\nAccuracy:  0.9641255605381166\nF1-score:  0.8461538461538461\n              precision    recall  f1-score   support\n\n           0       0.96      1.00      0.98       966\n           1       0.99      0.74      0.85       149\n\n    accuracy                           0.96      1115\n   macro avg       0.98      0.87      0.91      1115\nweighted avg       0.97      0.96      0.96      1115\n\n\nget_preds(df, 'text', 'tfidf', (2, 2))\nVocabulary length:  35173\nDocument-term matrix shape:  (4457, 35173)\nUsed algorithm: tfidf\nAUC:  0.6308724832214765\nAccuracy:  0.9013452914798207\nF1-score:  0.41489361702127664\n              precision    recall  f1-score   support\n\n           0       0.90      1.00      0.95       966\n           1       1.00      0.26      0.41       149\n\n    accuracy                           0.90      1115\n   macro avg       0.95      0.63      0.68      1115\nweighted avg       0.91      0.90      0.88      1115\n\n","output_type":"stream"}],"execution_count":191},{"cell_type":"code","source":"# print(\"get_preds('text_normalized', 'cv')\")\n# get_preds('text_normalized', 'cv')\n# print()\n# print(\"get_preds('text_normalized', 'cv', (1, 2))\")\n# get_preds('text_normalized', 'cv', (1, 2))\n# print()\n# print(\"get_preds('text_normalized', 'cv', (2, 2))\")\n# get_preds('text_normalized', 'cv', (2, 2))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:55:30.332725Z","iopub.execute_input":"2024-10-16T14:55:30.333393Z","iopub.status.idle":"2024-10-16T14:55:30.337415Z","shell.execute_reply.started":"2024-10-16T14:55:30.333350Z","shell.execute_reply":"2024-10-16T14:55:30.336520Z"}},"outputs":[],"execution_count":193},{"cell_type":"code","source":"# print(\"get_preds('text_normalized', 'tfidf')\")\n# get_preds('text_normalized', 'tfidf')\n# print()\n# print(\"get_preds('text_normalized', 'tfidf', (1, 2))\")\n# get_preds('text_normalized', 'tfidf', (1, 2))\n# print()\n# print(\"get_preds('text_normalized', 'tfidf', (2, 2))\")\n# get_preds('text_normalized', 'tfidf', (2, 2))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:55:30.344510Z","iopub.execute_input":"2024-10-16T14:55:30.344801Z","iopub.status.idle":"2024-10-16T14:55:30.349708Z","shell.execute_reply.started":"2024-10-16T14:55:30.344769Z","shell.execute_reply":"2024-10-16T14:55:30.348951Z"}},"outputs":[],"execution_count":194},{"cell_type":"markdown","source":"# Using previously trained embeddings","metadata":{}},{"cell_type":"code","source":"def build_corpus(data):\n    \"Creates a list of lists containing words from each sentence\"\n    corpus = []\n    for sentence in data:\n        word_list = sentence.split(\" \")\n        corpus.append(word_list)\n\n    return corpus","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:55:30.351925Z","iopub.execute_input":"2024-10-16T14:55:30.352448Z","iopub.status.idle":"2024-10-16T14:55:30.359746Z","shell.execute_reply.started":"2024-10-16T14:55:30.352400Z","shell.execute_reply":"2024-10-16T14:55:30.359019Z"}},"outputs":[],"execution_count":195},{"cell_type":"code","source":"corpus = build_corpus(df['text_normalized'])\ncorpus[0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:55:30.374513Z","iopub.execute_input":"2024-10-16T14:55:30.374778Z","iopub.status.idle":"2024-10-16T14:55:30.391474Z","shell.execute_reply.started":"2024-10-16T14:55:30.374748Z","shell.execute_reply":"2024-10-16T14:55:30.390603Z"}},"outputs":[{"execution_count":196,"output_type":"execute_result","data":{"text/plain":"['go',\n 'jurong',\n 'point',\n 'crazy',\n 'available',\n 'bugis',\n 'great',\n 'world',\n 'la',\n 'buffet',\n 'cine',\n 'get',\n 'amore',\n 'wat']"},"metadata":{}}],"execution_count":196},{"cell_type":"code","source":"# vector_size - Dimensionality of the word vectors\n# window - Maximum distance between the current and predicted word within a sentence\n# min_count - Ignores all words with total frequency lower than this\n\nmodel_emb_from_scratch = word2vec.Word2Vec(corpus, vector_size=100, window=5, min_count=50, workers=4)\n\n# saving vectors\nmodel_emb_from_scratch.wv.save_word2vec_format('/kaggle/working/model_emb_from_scratch.bin', binary=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:55:30.393009Z","iopub.execute_input":"2024-10-16T14:55:30.393359Z","iopub.status.idle":"2024-10-16T14:55:30.547028Z","shell.execute_reply.started":"2024-10-16T14:55:30.393316Z","shell.execute_reply":"2024-10-16T14:55:30.546276Z"}},"outputs":[],"execution_count":197},{"cell_type":"code","source":"class WordEmbedding:\n\n    def __init__(self):\n        self.model = {}\n\n    def convert(self, source, ipnut_file_path, output_file_path):\n        '''\n        Converts word embeddings from GloVe format to Word2Vec format\n        '''\n        if source == 'glove':\n            glove2word2vec(ipnut_file_path, output_file_path)\n        elif source in ['word2vec', 'fasttext', 'from_scratch']:\n            pass\n        else:\n            raise ValueError('Possible value of source are glove, word2vec, fasttext, or from_scratch')\n\n    def load(self, source, file_path):\n        '''\n        Loads a specified word embedding model from a file\n        '''\n        print(datetime.datetime.now(), 'start: loading', source)\n        if source in ['glove', 'fasttext']:\n            self.model[source] = gensim.models.KeyedVectors.load_word2vec_format(file_path)\n        elif source in ['word2vec', 'from_scratch']:\n            self.model[source] = gensim.models.KeyedVectors.load_word2vec_format(file_path, binary=True)\n        else:\n            raise ValueError('Possible value of source are glove, word2vec, fasttext, or from_scratch')\n\n        print(datetime.datetime.now(), 'end: loading', source)\n\n        return self\n\n    def get_model(self, source):\n        '''\n        Retrieves the loaded word embedding model\n        '''\n        if source not in ['glove', 'word2vec', 'fasttext', 'from_scratch']:\n            raise ValueError('Possible value of source are glove, word2vec, fasttext, or from_scratch')\n\n        return self.model[source]\n\n    def get_words(self, source, size=None):\n        '''\n        Retrieves a list of words from the model\n        '''\n        if source not in ['glove', 'word2vec', 'fasttext', 'from_scratch']:\n            raise ValueError('Possible value of source are glove, word2vec, fasttext, or from_scratch')\n\n        if size is None:\n            return [w for w in self.get_model(source=source).key_to_index]\n        else:\n            results = []\n            for i, word in enumerate(self.get_model(source=source).key_to_index):\n                if i >= size:\n                    break\n                results.append(word)\n            return results\n\n        return Exception('Unexpected flow')\n\n    def get_dimension(self, source):\n        '''\n        Retrieves the dimension of word vectors in the model\n        '''\n        if source not in ['glove', 'word2vec', 'fasttext', 'from_scratch']:\n            raise ValueError('Possible value of source are glove, word2vec, fasttext, or from_scratch')\n\n        return self.get_model(source=source).vectors[0].shape[0]\n\n    def get_vectors(self, source, words=None):\n        '''\n        Retrieves vectors for specified words or for all words in the model\n        '''\n        if source not in ['glove', 'word2vec', 'fasttext', 'from_scratch']:\n            raise ValueError('Possible value of source are glove, word2vec, fasttext, or from_scratch')\n\n        if words is None:\n            words = self.get_words(source=source)\n\n        embedding = np.empty((len(words), self.get_dimension(source=source)), dtype=np.float32)\n        for i, word in enumerate(words):\n            embedding[i] = self.get_vector(source=source, word=word)\n\n        return embedding\n\n    def get_vector(self, source, word):\n        '''\n        Retrieves the vector representation of a single word\n        '''\n        if source not in ['glove', 'word2vec', 'fasttext', 'from_scratch']:\n            raise ValueError('Possible value of source are glove, word2vec, fasttext, or from_scratch')\n\n        if source not in self.model:\n            raise ValueError('Did not load %s model yet' % source)\n\n        try:\n            return self.model[source][word]\n        except KeyError as e:\n            dims = self.model[source][0].shape\n            vect = np.empty(dims)\n            vect[:] = np.nan\n            return vect\n\n    def get_synonym(self, source, word, topn=5):\n        '''\n        Retrieves synonyms for a given word\n        '''\n        if source not in ['glove', 'word2vec', 'fasttext', 'from_scratch']:\n            raise ValueError('Possible value of source are glove, word2vec, fasttext, or from_scratch')\n\n        if source not in self.model:\n            raise ValueError('Did not load %s model yet' % source)\n\n        try:\n            return self.model[source].most_similar(positive=word, topn=topn)\n        except KeyError as e:\n            raise\n\n    def get_distance_between_two_words(self, source, word1, word2):\n        '''\n        Calculates cosine similarity between two words in the model\n        '''\n        if source not in ['glove', 'word2vec', 'fasttext', 'from_scratch']:\n            raise ValueError('Possible value of source are glove, word2vec, fasttext, or from_scratch')\n\n        if source not in self.model:\n            raise ValueError('Did not load %s model yet' % source)\n\n        try:\n            return self.model[source].similarity(word1, word2)\n        except KeyError as e:\n            raise","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:55:30.548235Z","iopub.execute_input":"2024-10-16T14:55:30.548556Z","iopub.status.idle":"2024-10-16T14:55:30.570631Z","shell.execute_reply.started":"2024-10-16T14:55:30.548524Z","shell.execute_reply":"2024-10-16T14:55:30.569738Z"}},"outputs":[],"execution_count":198},{"cell_type":"code","source":"word2vec_file_path = '/kaggle/input/googlenewsvectorsnegative300/GoogleNews-vectors-negative300.bin'\n\ndownloaded_glove_file_path = '/kaggle/input/glove6b100dtxt/glove.6B.100d.txt'\nglove_file_path = '/kaggle/working/glove.6B.100d.vec'\n\nfrom_scratch_file_path = '/kaggle/working/model_emb_from_scratch.bin'\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:55:30.587734Z","iopub.execute_input":"2024-10-16T14:55:30.588039Z","iopub.status.idle":"2024-10-16T14:55:30.592325Z","shell.execute_reply.started":"2024-10-16T14:55:30.588006Z","shell.execute_reply":"2024-10-16T14:55:30.591412Z"}},"outputs":[],"execution_count":199},{"cell_type":"code","source":"gc.collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:55:30.593933Z","iopub.execute_input":"2024-10-16T14:55:30.594523Z","iopub.status.idle":"2024-10-16T14:55:30.978195Z","shell.execute_reply.started":"2024-10-16T14:55:30.594479Z","shell.execute_reply":"2024-10-16T14:55:30.977273Z"}},"outputs":[{"execution_count":200,"output_type":"execute_result","data":{"text/plain":"12399"},"metadata":{}}],"execution_count":200},{"cell_type":"code","source":"word_embedding = WordEmbedding()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:55:30.979410Z","iopub.execute_input":"2024-10-16T14:55:30.979773Z","iopub.status.idle":"2024-10-16T14:55:30.988061Z","shell.execute_reply.started":"2024-10-16T14:55:30.979737Z","shell.execute_reply":"2024-10-16T14:55:30.987371Z"}},"outputs":[],"execution_count":201},{"cell_type":"code","source":"word_embedding.convert(source='glove', ipnut_file_path=downloaded_glove_file_path, output_file_path=glove_file_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:55:30.990515Z","iopub.execute_input":"2024-10-16T14:55:30.990952Z","iopub.status.idle":"2024-10-16T14:56:35.620592Z","shell.execute_reply.started":"2024-10-16T14:55:30.990908Z","shell.execute_reply":"2024-10-16T14:56:35.619572Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/863092134.py:11: DeprecationWarning: Call to deprecated `glove2word2vec` (KeyedVectors.load_word2vec_format(.., binary=False, no_header=True) loads GLoVE text vectors.).\n  glove2word2vec(ipnut_file_path, output_file_path)\n","output_type":"stream"}],"execution_count":202},{"cell_type":"code","source":"%%time\n\nword_embedding.load(source='word2vec', file_path=word2vec_file_path)\nword_embedding.load(source='glove', file_path=glove_file_path)\nword_embedding.load(source='from_scratch', file_path=from_scratch_file_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:56:35.621991Z","iopub.execute_input":"2024-10-16T14:56:35.622409Z","iopub.status.idle":"2024-10-16T14:57:57.870105Z","shell.execute_reply.started":"2024-10-16T14:56:35.622363Z","shell.execute_reply":"2024-10-16T14:57:57.869174Z"}},"outputs":[{"name":"stdout","text":"2024-10-16 14:56:35.624763 start: loading word2vec\n2024-10-16 14:57:17.816518 end: loading word2vec\n2024-10-16 14:57:17.816628 start: loading glove\n2024-10-16 14:57:57.862314 end: loading glove\n2024-10-16 14:57:57.862494 start: loading from_scratch\n2024-10-16 14:57:57.865286 end: loading from_scratch\nCPU times: user 1min 19s, sys: 2.95 s, total: 1min 22s\nWall time: 1min 22s\n","output_type":"stream"},{"execution_count":203,"output_type":"execute_result","data":{"text/plain":"<__main__.WordEmbedding at 0x7938302fd3c0>"},"metadata":{}}],"execution_count":203},{"cell_type":"markdown","source":"# Building and training the model","metadata":{}},{"cell_type":"code","source":"def tok2vec(tokens, source:str, avg:str):\n    \"\"\"\n    Given a list of tokens, return their vector representation.\n    Args:\n        tokens: List(str) tokenized input\n        source: embedding algorithm to use with the WordEmbedding object\n        avg: vectors averaging method - `sum` or `mean` of all vectors\n    \"\"\"\n    vects = word_embedding.get_vectors(source=source, words=tokens)\n    expected_vector_size = word_embedding.get_dimension(source=source)\n    if len(vects) == 0 or np.all(np.isnan(vects)):\n        return np.zeros(expected_vector_size)\n\n    if avg == 'mean':\n        return np.nanmean(vects, axis=0)\n    elif avg == 'sum':\n        return np.nansum(vects, axis=0)\n    else:\n        raise ValueError('Select correct averaging method: sum or mean')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T14:57:57.871267Z","iopub.execute_input":"2024-10-16T14:57:57.871570Z","iopub.status.idle":"2024-10-16T14:57:57.878184Z","shell.execute_reply.started":"2024-10-16T14:57:57.871536Z","shell.execute_reply":"2024-10-16T14:57:57.877297Z"}},"outputs":[],"execution_count":204},{"cell_type":"code","source":"def get_preds_with_embeddings(df, text_column, source:str, avg='sum'):  \n    X_train, X_test, y_train, y_test = train_test_split(df[text_column], \n                                                        df.spam, \n                                                        test_size=0.2, \n                                                        stratify=df['spam'], random_state=42)\n    X_train = X_train.apply(word_tokenize).apply(lambda x: tok2vec(x, source, avg)).to_numpy()\n    X_test = X_test.apply(word_tokenize).apply(lambda x: tok2vec(x, source, avg)).to_numpy()\n    \n    X_train = np.stack(X_train, axis=0)\n    X_test = np.stack(X_test, axis=0)\n    \n    model = LogisticRegression(max_iter=1000, random_state=42)\n    model.fit(X_train, y_train)\n\n    predictions = model.predict(X_test)\n    \n    print(f'Used algorithm: {source}')\n    roc_auc_result = roc_auc_score(y_test, predictions)\n    print('AUC: ', roc_auc_result)\n    accuracy_result = accuracy_score(y_test, predictions)\n    print('Accuracy: ', accuracy_result)\n    f1_result = f1_score(y_test, predictions)\n    print('F1-score: ', f1_result)\n    print(classification_report(y_test, predictions))\n\n    return predictions, roc_auc_result, accuracy_result, f1_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T15:01:13.874719Z","iopub.execute_input":"2024-10-16T15:01:13.875607Z","iopub.status.idle":"2024-10-16T15:01:13.884250Z","shell.execute_reply.started":"2024-10-16T15:01:13.875566Z","shell.execute_reply":"2024-10-16T15:01:13.883363Z"}},"outputs":[],"execution_count":215},{"cell_type":"code","source":"print(df)\nprint()\nprint(df_dedupe_text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T15:01:13.892641Z","iopub.execute_input":"2024-10-16T15:01:13.892953Z","iopub.status.idle":"2024-10-16T15:01:13.902924Z","shell.execute_reply.started":"2024-10-16T15:01:13.892919Z","shell.execute_reply":"2024-10-16T15:01:13.902012Z"}},"outputs":[{"name":"stdout","text":"     classification                                               text  \\\n0               ham  Go until jurong point, crazy.. Available only ...   \n1               ham                      Ok lar... Joking wif u oni...   \n2              spam  Free entry in 2 a wkly comp to win FA Cup fina...   \n3               ham  U dun say so early hor... U c already then say...   \n4               ham  Nah I don't think he goes to usf, he lives aro...   \n...             ...                                                ...   \n5567           spam  This is the 2nd time we have tried 2 contact u...   \n5568            ham              Will Ì_ b going to esplanade fr home?   \n5569            ham  Pity, * was in mood for that. So...any other s...   \n5570            ham  The guy did some bitching but I acted like i'd...   \n5571            ham                         Rofl. Its true to its name   \n\n                                        text_normalized  spam  \n0     go jurong point crazy available bugis great wo...     0  \n1                                   ok lar joke wif oni     0  \n2     free entry wkly comp win fa cup final tkts st ...     1  \n3                         dun say early hor already say     0  \n4               nah not think go usf live around though     0  \n...                                                 ...   ...  \n5567  nd time try contact win pound prize claim easy...     1  \n5568                               go esplanade fr home     0  \n5569                    pity mood that soany suggestion     0  \n5570  guy bitching act like interested buy something...     0  \n5571                                     rofl true name     0  \n\n[5572 rows x 4 columns]\n\n     classification                                               text  \\\n0               ham  Go until jurong point, crazy.. Available only ...   \n1               ham                      Ok lar... Joking wif u oni...   \n2               ham  U dun say so early hor... U c already then say...   \n3               ham  Nah I don't think he goes to usf, he lives aro...   \n4              spam  FreeMsg Hey there darling it's been 3 week's n...   \n...             ...                                                ...   \n4883           spam  This is the 2nd time we have tried 2 contact u...   \n4884            ham              Will Ì_ b going to esplanade fr home?   \n4885            ham  Pity, * was in mood for that. So...any other s...   \n4886            ham  The guy did some bitching but I acted like i'd...   \n4887            ham                         Rofl. Its true to its name   \n\n                                        text_normalized  spam  \n0     go jurong point crazy available bugis great wo...     0  \n1                                   ok lar joke wif oni     0  \n2                         dun say early hor already say     0  \n3               nah not think go usf live around though     0  \n4     freemsg hey darling week 's no word back like ...     1  \n...                                                 ...   ...  \n4883  nd time try contact win pound prize claim easy...     1  \n4884                               go esplanade fr home     0  \n4885                    pity mood that soany suggestion     0  \n4886  guy bitching act like interested buy something...     0  \n4887                                     rofl true name     0  \n\n[4888 rows x 4 columns]\n","output_type":"stream"}],"execution_count":216},{"cell_type":"code","source":"df_pred_w2v= get_preds_with_embeddings(df, 'text_normalized', source='word2vec')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T15:01:13.908394Z","iopub.execute_input":"2024-10-16T15:01:13.908698Z","iopub.status.idle":"2024-10-16T15:01:15.341980Z","shell.execute_reply.started":"2024-10-16T15:01:13.908659Z","shell.execute_reply":"2024-10-16T15:01:15.340675Z"}},"outputs":[{"name":"stdout","text":"Used algorithm: word2vec\nAUC:  0.952235052176692\nAccuracy:  0.9811659192825112\nF1-score:  0.9283276450511946\n              precision    recall  f1-score   support\n\n           0       0.99      0.99      0.99       966\n           1       0.94      0.91      0.93       149\n\n    accuracy                           0.98      1115\n   macro avg       0.97      0.95      0.96      1115\nweighted avg       0.98      0.98      0.98      1115\n\n","output_type":"stream"}],"execution_count":217},{"cell_type":"code","source":"df_pred_w2v = get_preds_with_embeddings(df, 'text', source='word2vec')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T15:01:15.344289Z","iopub.execute_input":"2024-10-16T15:01:15.344998Z","iopub.status.idle":"2024-10-16T15:01:18.121603Z","shell.execute_reply.started":"2024-10-16T15:01:15.344937Z","shell.execute_reply":"2024-10-16T15:01:18.120257Z"}},"outputs":[{"name":"stdout","text":"Used algorithm: word2vec\nAUC:  0.9555907568746786\nAccuracy:  0.9820627802690582\nF1-score:  0.9319727891156463\n              precision    recall  f1-score   support\n\n           0       0.99      0.99      0.99       966\n           1       0.94      0.92      0.93       149\n\n    accuracy                           0.98      1115\n   macro avg       0.97      0.96      0.96      1115\nweighted avg       0.98      0.98      0.98      1115\n\n","output_type":"stream"}],"execution_count":218},{"cell_type":"code","source":"df_pred_glove = get_preds_with_embeddings(df, 'text_normalized', source='glove')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T15:01:18.123604Z","iopub.execute_input":"2024-10-16T15:01:18.124466Z","iopub.status.idle":"2024-10-16T15:01:19.613853Z","shell.execute_reply.started":"2024-10-16T15:01:18.124393Z","shell.execute_reply":"2024-10-16T15:01:19.612500Z"}},"outputs":[{"name":"stdout","text":"Used algorithm: glove\nAUC:  0.895438186946795\nAccuracy:  0.9614349775784753\nF1-score:  0.8480565371024734\n              precision    recall  f1-score   support\n\n           0       0.97      0.99      0.98       966\n           1       0.90      0.81      0.85       149\n\n    accuracy                           0.96      1115\n   macro avg       0.93      0.90      0.91      1115\nweighted avg       0.96      0.96      0.96      1115\n\n","output_type":"stream"}],"execution_count":219},{"cell_type":"code","source":"df_pred_from_scratch = get_preds_with_embeddings(df, 'text_normalized', source='from_scratch')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T15:01:19.617638Z","iopub.execute_input":"2024-10-16T15:01:19.619026Z","iopub.status.idle":"2024-10-16T15:01:21.068152Z","shell.execute_reply.started":"2024-10-16T15:01:19.618961Z","shell.execute_reply":"2024-10-16T15:01:21.064953Z"}},"outputs":[{"name":"stdout","text":"Used algorithm: from_scratch\nAUC:  0.8593105173204385\nAccuracy:  0.957847533632287\nF1-score:  0.8212927756653992\n              precision    recall  f1-score   support\n\n           0       0.96      0.99      0.98       966\n           1       0.95      0.72      0.82       149\n\n    accuracy                           0.96      1115\n   macro avg       0.95      0.86      0.90      1115\nweighted avg       0.96      0.96      0.96      1115\n\n","output_type":"stream"}],"execution_count":220},{"cell_type":"code","source":"df_dedupe_pred_w2v = get_preds_with_embeddings(df_dedupe_text, 'text_normalized', source='word2vec')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T15:01:21.070055Z","iopub.execute_input":"2024-10-16T15:01:21.070608Z","iopub.status.idle":"2024-10-16T15:01:22.399337Z","shell.execute_reply.started":"2024-10-16T15:01:21.070542Z","shell.execute_reply":"2024-10-16T15:01:22.398137Z"}},"outputs":[{"name":"stdout","text":"Used algorithm: word2vec\nAUC:  0.9353419612256381\nAccuracy:  0.967280163599182\nF1-score:  0.8632478632478632\n              precision    recall  f1-score   support\n\n           0       0.99      0.98      0.98       865\n           1       0.83      0.89      0.86       113\n\n    accuracy                           0.97       978\n   macro avg       0.91      0.94      0.92       978\nweighted avg       0.97      0.97      0.97       978\n\n","output_type":"stream"}],"execution_count":221},{"cell_type":"code","source":"df_dedupe_pred_w2v_text = get_preds_with_embeddings(df_dedupe_text, 'text', source='word2vec')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T15:01:22.401854Z","iopub.execute_input":"2024-10-16T15:01:22.402811Z","iopub.status.idle":"2024-10-16T15:01:24.695525Z","shell.execute_reply.started":"2024-10-16T15:01:22.402744Z","shell.execute_reply":"2024-10-16T15:01:24.694308Z"}},"outputs":[{"name":"stdout","text":"Used algorithm: word2vec\nAUC:  0.956130748375876\nAccuracy:  0.983640081799591\nF1-score:  0.9285714285714286\n              precision    recall  f1-score   support\n\n           0       0.99      0.99      0.99       865\n           1       0.94      0.92      0.93       113\n\n    accuracy                           0.98       978\n   macro avg       0.96      0.96      0.96       978\nweighted avg       0.98      0.98      0.98       978\n\n","output_type":"stream"}],"execution_count":222},{"cell_type":"code","source":"df_dedupe_pred_glove = get_preds_with_embeddings(df_dedupe_text, 'text_normalized', source='glove')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T15:01:24.697307Z","iopub.execute_input":"2024-10-16T15:01:24.698586Z","iopub.status.idle":"2024-10-16T15:01:25.964269Z","shell.execute_reply.started":"2024-10-16T15:01:24.698512Z","shell.execute_reply":"2024-10-16T15:01:25.963045Z"}},"outputs":[{"name":"stdout","text":"Used algorithm: glove\nAUC:  0.8862908588674613\nAccuracy:  0.9621676891615542\nF1-score:  0.8279069767441859\n              precision    recall  f1-score   support\n\n           0       0.97      0.98      0.98       865\n           1       0.87      0.79      0.83       113\n\n    accuracy                           0.96       978\n   macro avg       0.92      0.89      0.90       978\nweighted avg       0.96      0.96      0.96       978\n\n","output_type":"stream"}],"execution_count":223},{"cell_type":"code","source":"df_dedupe_pred_from_scratch = get_preds_with_embeddings(df_dedupe_text, 'text_normalized', source='from_scratch')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-16T15:01:25.965910Z","iopub.execute_input":"2024-10-16T15:01:25.966621Z","iopub.status.idle":"2024-10-16T15:01:27.202543Z","shell.execute_reply.started":"2024-10-16T15:01:25.966557Z","shell.execute_reply":"2024-10-16T15:01:27.199254Z"}},"outputs":[{"name":"stdout","text":"Used algorithm: from_scratch\nAUC:  0.8505140927924701\nAccuracy:  0.9601226993865031\nF1-score:  0.8040201005025125\n              precision    recall  f1-score   support\n\n           0       0.96      0.99      0.98       865\n           1       0.93      0.71      0.80       113\n\n    accuracy                           0.96       978\n   macro avg       0.95      0.85      0.89       978\nweighted avg       0.96      0.96      0.96       978\n\n","output_type":"stream"}],"execution_count":224},{"cell_type":"markdown","source":"# Analysis and interpretation of the results","metadata":{}},{"cell_type":"markdown","source":"Overall, from running the numerous tests above it seems that the best result come from the word2vec embeddings model (accuracy = 98.35%) that has had additional training on the deduplicated dataframe that had the duplicates of sentences removed after normalization. However, a notable mention here is the performance of the Bag of Words model (accuracy = 98.15%) that was trained on the embeddings of the similarly deduplicated list of words.","metadata":{}},{"cell_type":"markdown","source":"# Model improvement","metadata":{}},{"cell_type":"markdown","source":"Room for further testing and improvement of the model could be in trying some of the other available embedding models that are currently provided by some of the newer providers such as OpenAI. There is also room to look into the testing of the document of words model in order to see how it will impact the performance as strong performance was seen by the bag of words model.","metadata":{}}]}