{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":86259,"databundleVersionId":9778966,"sourceType":"competition"}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Library Imports and Environment Setup","metadata":{}},{"cell_type":"code","source":"# Install required packages (if not already installed)\n!pip install transformers torch torchvision\n\n# Standard library imports\nimport os\nimport gc\nimport warnings\nfrom collections import defaultdict, Counter\n\n# Set environment variables\nos.environ['CUDA_LAUNCH_BLOCKING'] = '1'\nwarnings.filterwarnings(\"ignore\")\n\n# Third-party imports\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import (\n    accuracy_score,\n    precision_recall_fscore_support,\n    confusion_matrix\n)\nfrom sklearn.model_selection import train_test_split\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms, models\nfrom transformers import RobertaTokenizer, RobertaModel","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:31.367740Z","iopub.execute_input":"2024-10-21T22:06:31.368111Z","iopub.status.idle":"2024-10-21T22:06:51.006582Z","shell.execute_reply.started":"2024-10-21T22:06:31.368072Z","shell.execute_reply":"2024-10-21T22:06:51.005699Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.45.1)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.4.0)\nRequirement already satisfied: torchvision in /opt/conda/lib/python3.10/site-packages (0.19.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers) (3.15.1)\nRequirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.25.1)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (6.0.2)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2024.5.15)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers) (2.32.3)\nRequirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.4.5)\nRequirement already satisfied: tokenizers<0.21,>=0.20 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.20.0)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers) (4.66.4)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.13.3)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch) (2024.6.1)\nRequirement already satisfied: pillow!=8.3.*,>=5.3.0 in /opt/conda/lib/python3.10/site-packages (from torchvision) (10.3.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers) (3.1.2)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2024.8.30)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"## Global configuration elements","metadata":{}},{"cell_type":"code","source":"class CFG:\n    BASE_DIR = \"/kaggle/input/deep-learning-for-computer-vision-and-nlp-2024-10/\"\n    TRAIN_CSV = os.path.join(BASE_DIR, \"train.csv\")\n    TEST_CSV = os.path.join(BASE_DIR, \"test.csv\")\n    TRAIN_IMAGES_DIR = os.path.join(BASE_DIR, \"images/images/train\")\n    TEST_IMAGES_DIR = os.path.join(BASE_DIR, \"images/images/test\")\n    OUTPUT_DIR = '/kaggle/working/'\n    IMAGE_SIZE = 224\n    MAX_LENGTH = 256\n    BATCH_SIZE = 16  # Adjust based on your system's capacity\n    NUM_EPOCHS = 5\n    NUM_CLASSES = 4  # Assuming classes are 1 to 4\n    DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    LEARNING_RATE = 1e-4\n    RANDOM_STATE = 42\n\n# Set random seed for reproducibility\ndef set_seed(seed=CFG.RANDOM_STATE):\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\nset_seed()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:51.008312Z","iopub.execute_input":"2024-10-21T22:06:51.008812Z","iopub.status.idle":"2024-10-21T22:06:51.052184Z","shell.execute_reply.started":"2024-10-21T22:06:51.008777Z","shell.execute_reply":"2024-10-21T22:06:51.051407Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# Data Loading and Preprocessing","metadata":{}},{"cell_type":"markdown","source":"## Load training and test data","metadata":{}},{"cell_type":"code","source":"# Load training and test data\ntrain_df = pd.read_csv(CFG.TRAIN_CSV, dtype=str, keep_default_na=False)\ntest_df = pd.read_csv(CFG.TEST_CSV, dtype=str, keep_default_na=False)\n\n# Convert data types\ntrain_df['AdoptionSpeed'] = pd.to_numeric(train_df['AdoptionSpeed'])\ntrain_df['PetID'] = train_df['PetID'].astype(str)\ntest_df['PetID'] = test_df['PetID'].astype(str)\n\n# Display basic information\nprint(\"Training Data Shape:\", train_df.shape)\nprint(\"Test Data Shape:\", test_df.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:51.053329Z","iopub.execute_input":"2024-10-21T22:06:51.053800Z","iopub.status.idle":"2024-10-21T22:06:51.186175Z","shell.execute_reply.started":"2024-10-21T22:06:51.053766Z","shell.execute_reply":"2024-10-21T22:06:51.185246Z"}},"outputs":[{"name":"stdout","text":"Training Data Shape: (6431, 3)\nTest Data Shape: (1891, 2)\n","output_type":"stream"}],"execution_count":3},{"cell_type":"markdown","source":"## Preparing image paths","metadata":{}},{"cell_type":"code","source":"from collections import defaultdict\n\n# Function to create a mapping from PetID to image file paths\ndef get_id_to_images(images_folder):\n    image_filenames = os.listdir(images_folder)\n    id_to_images = defaultdict(list)\n    for filename in image_filenames:\n        if filename.endswith(('.jpg', '.png', '.jpeg')):\n            id_part = filename.split('-')[0]\n            id_to_images[id_part].append(os.path.join(images_folder, filename))\n    return id_to_images\n\n# Get mappings for training and test images\ntrain_id_to_images = get_id_to_images(CFG.TRAIN_IMAGES_DIR)\ntest_id_to_images = get_id_to_images(CFG.TEST_IMAGES_DIR)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:51.188861Z","iopub.execute_input":"2024-10-21T22:06:51.189266Z","iopub.status.idle":"2024-10-21T22:06:51.710429Z","shell.execute_reply.started":"2024-10-21T22:06:51.189220Z","shell.execute_reply":"2024-10-21T22:06:51.709500Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"## Prepare Text Data and Labels","metadata":{}},{"cell_type":"code","source":"# Prepare text data\ntrain_text_data = dict(zip(train_df['PetID'], train_df['Description']))\ntest_text_data = dict(zip(test_df['PetID'], test_df['Description']))\n\n# Prepare labels (ensure labels are integers)\ntrain_labels = dict(zip(train_df['PetID'], train_df['AdoptionSpeed'].astype(int)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:51.711871Z","iopub.execute_input":"2024-10-21T22:06:51.712252Z","iopub.status.idle":"2024-10-21T22:06:51.723718Z","shell.execute_reply.started":"2024-10-21T22:06:51.712209Z","shell.execute_reply":"2024-10-21T22:06:51.722748Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"# Dataset and DataLoader setup","metadata":{}},{"cell_type":"markdown","source":"## Define the Multimodal Dataset Class","metadata":{}},{"cell_type":"code","source":"class MultimodalDataset(Dataset):\n    def __init__(self, text_data, labels=None, id_to_images=None, tokenizer=None, transform=None, max_length=256):\n        self.ids = list(text_data.keys())\n        self.text_data = text_data\n        self.labels = labels  # Labels can be None\n        self.id_to_images = id_to_images if id_to_images is not None else {}\n        self.tokenizer = tokenizer\n        self.transform = transform\n        self.max_length = max_length\n\n    def __len__(self):\n        return len(self.ids)\n\n    def __getitem__(self, idx):\n        id_ = self.ids[idx]\n        text = self.text_data[id_]\n\n        # Tokenize text\n        encoded = self.tokenizer.encode_plus(\n            text if text else \"\",  # Handle missing descriptions\n            add_special_tokens=True,\n            max_length=self.max_length,\n            padding='max_length',\n            truncation=True,\n            return_attention_mask=True,\n            return_tensors='pt',\n        )\n        input_ids = encoded['input_ids'].squeeze(0)\n        attention_mask = encoded['attention_mask'].squeeze(0)\n\n        # Load images associated with the ID\n        image_paths = self.id_to_images.get(id_, [])\n        images = []\n        for image_path in image_paths:\n            image = Image.open(image_path).convert('RGB')\n            if self.transform:\n                image = self.transform(image)\n            images.append(image)\n        if images:\n            images = torch.stack(images)\n        else:\n            # Handle case where no images are found\n            image_size = self.transform.transforms[0].size[0] if self.transform else CFG.IMAGE_SIZE\n            images = torch.zeros((1, 3, image_size, image_size))\n\n        # Prepare the sample dictionary\n        sample = {\n            'input_ids': input_ids,\n            'attention_mask': attention_mask,\n            'images': images,\n            'id': id_\n        }\n\n        # Include labels only if they are available\n        if self.labels is not None:\n            label = self.labels[id_]\n            label = label - 1 \n            label = torch.tensor(label, dtype=torch.long)\n            sample['label'] = label\n\n        return sample","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:51.724887Z","iopub.execute_input":"2024-10-21T22:06:51.725180Z","iopub.status.idle":"2024-10-21T22:06:51.737928Z","shell.execute_reply.started":"2024-10-21T22:06:51.725150Z","shell.execute_reply":"2024-10-21T22:06:51.737102Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"## Define the Collate Function","metadata":{}},{"cell_type":"code","source":"def collate_fn(batch):\n    input_ids = torch.stack([item['input_ids'] for item in batch])\n    attention_mask = torch.stack([item['attention_mask'] for item in batch])\n\n    # Handle images\n    images = [item['images'] for item in batch]\n    max_num_images = max([img.shape[0] for img in images])\n    padded_images = []\n    for img in images:\n        num_images = img.shape[0]\n        if num_images < max_num_images:\n            # Pad with zeros\n            padding = torch.zeros((max_num_images - num_images, *img.shape[1:]))\n            img = torch.cat([img, padding], dim=0)\n        padded_images.append(img)\n    images = torch.stack(padded_images)\n\n    ids = [item['id'] for item in batch]\n\n    batch_dict = {\n        'input_ids': input_ids,\n        'attention_mask': attention_mask,\n        'images': images,\n        'id': ids\n    }\n\n    # Include labels if they are present\n    if 'label' in batch[0]:\n        labels = torch.stack([item['label'] for item in batch])\n        batch_dict['label'] = labels\n\n    return batch_dict","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:51.738983Z","iopub.execute_input":"2024-10-21T22:06:51.739257Z","iopub.status.idle":"2024-10-21T22:06:51.755124Z","shell.execute_reply.started":"2024-10-21T22:06:51.739227Z","shell.execute_reply":"2024-10-21T22:06:51.754311Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"## Initialize Tokenizer and Transforms","metadata":{}},{"cell_type":"code","source":"# Initialize tokenizer\ntokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n\n# Define image transformations\nimage_transforms = transforms.Compose([\n    transforms.Resize((CFG.IMAGE_SIZE, CFG.IMAGE_SIZE)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                         std=[0.229, 0.224, 0.225]),\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:51.756008Z","iopub.execute_input":"2024-10-21T22:06:51.756278Z","iopub.status.idle":"2024-10-21T22:06:53.343711Z","shell.execute_reply.started":"2024-10-21T22:06:51.756248Z","shell.execute_reply":"2024-10-21T22:06:53.342801Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/25.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a3b0c704798f4af0afb935a2113076fb"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.json:   0%|          | 0.00/899k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3bfd2f2ef0fa4e36b0a70c34f8f65104"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bc223c18fbee4c65b9878affaeb869cb"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/1.36M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c83522e2c5e14f8f9a757563c56fee6b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/481 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"670448a1ba7a48dbb1e83de02c200e92"}},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"# Model Definition","metadata":{}},{"cell_type":"markdown","source":"## Textmodel","metadata":{}},{"cell_type":"code","source":"class TextModel(nn.Module):\n    def __init__(self):\n        super(TextModel, self).__init__()\n        self.roberta = RobertaModel.from_pretrained('distilroberta-base')\n        self.dropout = nn.Dropout(p=0.3)\n        self.output_dim = 256\n        self.fc = nn.Linear(self.roberta.config.hidden_size, self.output_dim)\n        \n        # Freeze some layers if necessary\n        for param in self.roberta.embeddings.parameters():\n            param.requires_grad = False\n        for param in self.roberta.encoder.layer[:2].parameters():  # Freeze first 2 layers\n            param.requires_grad = False\n\n    def forward(self, input_ids, attention_mask):\n        outputs = self.roberta(input_ids=input_ids, attention_mask=attention_mask)\n        x = outputs.last_hidden_state[:, 0, :]  # [CLS] token\n        x = self.dropout(x)\n        x = self.fc(x)\n        return x","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:53.345027Z","iopub.execute_input":"2024-10-21T22:06:53.345765Z","iopub.status.idle":"2024-10-21T22:06:53.353614Z","shell.execute_reply.started":"2024-10-21T22:06:53.345719Z","shell.execute_reply":"2024-10-21T22:06:53.352729Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"## ImageModel","metadata":{}},{"cell_type":"code","source":"class ImageModel(nn.Module):\n    def __init__(self):\n        super(ImageModel, self).__init__()\n        self.model = models.resnet18(pretrained=True)\n        self.model.fc = nn.Identity()\n        self.output_dim = 512  # ResNet18's output dimension\n        \n        # Freeze some layers if necessary\n        for param in self.model.parameters():\n            param.requires_grad = False\n        for param in self.model.layer4.parameters():  # Unfreeze last block\n            param.requires_grad = True\n\n    def forward(self, images):\n        # images shape: [batch_size, max_num_images, channels, height, width]\n        batch_size, num_images, channels, height, width = images.shape\n        images = images.view(-1, channels, height, width)  # Flatten batch and images\n        features = self.model(images)  # Shape: [batch_size * num_images, feature_dim]\n        features = features.view(batch_size, num_images, -1)\n        features = torch.mean(features, dim=1)  # Aggregate features by averaging\n        return features","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:53.357053Z","iopub.execute_input":"2024-10-21T22:06:53.357346Z","iopub.status.idle":"2024-10-21T22:06:53.370096Z","shell.execute_reply.started":"2024-10-21T22:06:53.357316Z","shell.execute_reply":"2024-10-21T22:06:53.369276Z"}},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"## MultiModal Model","metadata":{}},{"cell_type":"code","source":"class MultimodalModel(nn.Module):\n    def __init__(self, text_model, image_model, num_classes):\n        super(MultimodalModel, self).__init__()\n        self.text_model = text_model\n        self.image_model = image_model\n        combined_feature_dim = self.text_model.output_dim + self.image_model.output_dim\n        self.classifier = nn.Sequential(\n            nn.Linear(combined_feature_dim, 128),\n            nn.ReLU(),\n            nn.Dropout(0.5),\n            nn.Linear(128, num_classes)\n        )\n\n    def forward(self, input_ids, attention_mask, images):\n        text_features = self.text_model(input_ids, attention_mask)\n        image_features = self.image_model(images)\n        combined = torch.cat((text_features, image_features), dim=1)\n        output = self.classifier(combined)\n        return output","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:53.371287Z","iopub.execute_input":"2024-10-21T22:06:53.371619Z","iopub.status.idle":"2024-10-21T22:06:53.382455Z","shell.execute_reply.started":"2024-10-21T22:06:53.371587Z","shell.execute_reply":"2024-10-21T22:06:53.381532Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"# Training the model","metadata":{}},{"cell_type":"markdown","source":"## Split data into training and validation sets","metadata":{}},{"cell_type":"code","source":"# Get list of IDs\nids = list(train_text_data.keys())\n\n# Split IDs into training and validation sets\ntrain_ids, val_ids = train_test_split(ids, test_size=0.2, random_state=CFG.RANDOM_STATE)\n\n# Create training and validation datasets\ntrain_dataset = MultimodalDataset(\n    text_data={id_: train_text_data[id_] for id_ in train_ids},\n    labels={id_: train_labels[id_] for id_ in train_ids},\n    id_to_images=train_id_to_images,\n    tokenizer=tokenizer,\n    transform=image_transforms,\n    max_length=CFG.MAX_LENGTH\n)\n\nval_dataset = MultimodalDataset(\n    text_data={id_: train_text_data[id_] for id_ in val_ids},\n    labels={id_: train_labels[id_] for id_ in val_ids},\n    id_to_images=train_id_to_images,\n    tokenizer=tokenizer,\n    transform=image_transforms,\n    max_length=CFG.MAX_LENGTH\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:53.383586Z","iopub.execute_input":"2024-10-21T22:06:53.383863Z","iopub.status.idle":"2024-10-21T22:06:53.404153Z","shell.execute_reply.started":"2024-10-21T22:06:53.383834Z","shell.execute_reply":"2024-10-21T22:06:53.403383Z"}},"outputs":[],"execution_count":12},{"cell_type":"markdown","source":"## Create DataLoaders","metadata":{}},{"cell_type":"code","source":"train_dataloader = DataLoader(\n    train_dataset,\n    batch_size=CFG.BATCH_SIZE,\n    shuffle=True,\n    collate_fn=collate_fn,\n    num_workers=4,\n    pin_memory=True\n)\n\nval_dataloader = DataLoader(\n    val_dataset,\n    batch_size=CFG.BATCH_SIZE,\n    shuffle=False,\n    collate_fn=collate_fn,\n    num_workers=4,\n    pin_memory=True\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:53.405233Z","iopub.execute_input":"2024-10-21T22:06:53.405645Z","iopub.status.idle":"2024-10-21T22:06:53.415769Z","shell.execute_reply.started":"2024-10-21T22:06:53.405613Z","shell.execute_reply":"2024-10-21T22:06:53.414643Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"## Initializing models and optimizer","metadata":{}},{"cell_type":"code","source":"# Initialize models\ntext_model = TextModel().to(CFG.DEVICE)\nimage_model = ImageModel().to(CFG.DEVICE)\nmodel = MultimodalModel(text_model, image_model, num_classes=CFG.NUM_CLASSES).to(CFG.DEVICE)\n\n# Define optimizer and loss function\noptimizer = torch.optim.Adam(model.parameters(), lr=CFG.LEARNING_RATE)\ncriterion = nn.CrossEntropyLoss()\nscheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=2, factor=0.5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:53.416982Z","iopub.execute_input":"2024-10-21T22:06:53.417348Z","iopub.status.idle":"2024-10-21T22:06:56.153870Z","shell.execute_reply.started":"2024-10-21T22:06:53.417307Z","shell.execute_reply":"2024-10-21T22:06:56.152693Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/480 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bf4b00a49f934549bee6c2776df903bb"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/331M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"13a75b39d06a4c95b18938d80476b4cd"}},"metadata":{}},{"name":"stderr","text":"Downloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n100%|██████████| 44.7M/44.7M [00:00<00:00, 184MB/s]\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"## Training Loop","metadata":{}},{"cell_type":"code","source":"# # In your training loop, after loading labels\n# labels = batch['label'].to(CFG.DEVICE)\n# labels = labels.long()\n\n# # Debugging: Print label information\n# if batch_idx == 0 and epoch == 0:\n#     print(\"Labels min:\", labels.min().item())\n#     print(\"Labels max:\", labels.max().item())\n#     print(\"Labels unique values:\", labels.unique())\n#     print(\"Labels shape:\", labels.shape)\n#     print(\"Labels dtype:\", labels.dtype)\n#     print(\"Labels device:\", labels.device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:06:56.155544Z","iopub.execute_input":"2024-10-21T22:06:56.155853Z","iopub.status.idle":"2024-10-21T22:06:56.551861Z","shell.execute_reply.started":"2024-10-21T22:06:56.155821Z","shell.execute_reply":"2024-10-21T22:06:56.545291Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[15], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# In your training loop, after loading labels\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m labels \u001b[38;5;241m=\u001b[39m \u001b[43mbatch\u001b[49m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlabel\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mto(CFG\u001b[38;5;241m.\u001b[39mDEVICE)\n\u001b[1;32m      3\u001b[0m labels \u001b[38;5;241m=\u001b[39m labels\u001b[38;5;241m.\u001b[39mlong()\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Debugging: Print label information\u001b[39;00m\n","\u001b[0;31mNameError\u001b[0m: name 'batch' is not defined"],"ename":"NameError","evalue":"name 'batch' is not defined","output_type":"error"}],"execution_count":15},{"cell_type":"code","source":"from torch.cuda.amp import autocast, GradScaler\n\nscaler = GradScaler()\nbest_val_accuracy = 0.0\n\nfor epoch in range(CFG.NUM_EPOCHS):\n    model.train()\n    running_loss = 0.0\n    for batch_idx, batch in enumerate(train_dataloader):\n        optimizer.zero_grad()\n        input_ids = batch['input_ids'].to(CFG.DEVICE)\n        attention_mask = batch['attention_mask'].to(CFG.DEVICE)\n        images = batch['images'].to(CFG.DEVICE)\n        labels = batch['label'].to(CFG.DEVICE)\n        labels = labels.long()\n        \n        # Debugging: Verify labels\n        if batch_idx == 0 and epoch == 0:\n            print(\"Labels min:\", labels.min().item())  # Should be 0\n            print(\"Labels max:\", labels.max().item())  # Should be 3\n            print(\"Labels unique values:\", labels.unique())\n            print(\"Labels dtype:\", labels.dtype)  # Should be torch.int64 or torch.long\n\n        with autocast():\n            outputs = model(input_ids, attention_mask, images)\n            loss = criterion(outputs, labels)\n\n        scaler.scale(loss).backward()\n        scaler.step(optimizer)\n        scaler.update()\n\n        running_loss += loss.item()\n\n    avg_train_loss = running_loss / len(train_dataloader)\n    print(f\"Epoch {epoch+1}/{CFG.NUM_EPOCHS}, Training Loss: {avg_train_loss:.4f}\")\n\n    # Evaluate on validation set\n    model.eval()\n    all_preds = []\n    all_labels = []\n    with torch.no_grad():\n        for batch in val_dataloader:\n            input_ids = batch['input_ids'].to(CFG.DEVICE)\n            attention_mask = batch['attention_mask'].to(CFG.DEVICE)\n            images = batch['images'].to(CFG.DEVICE)\n            labels = batch['label'].to(CFG.DEVICE)\n            labels = labels.long()\n\n            outputs = model(input_ids, attention_mask, images)\n            _, preds = torch.max(outputs, dim=1)\n\n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n\n    # Calculate validation metrics\n    val_accuracy = accuracy_score(all_labels, all_preds)\n    print(f\"Validation Accuracy: {val_accuracy:.4f}\")\n\n    # Adjust learning rate\n    scheduler.step(avg_train_loss)\n\n    # Save the best model\n    if val_accuracy > best_val_accuracy:\n        best_val_accuracy = val_accuracy\n        torch.save(model.state_dict(), 'best_model.pth')\n        print(\"Best model saved.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:07:25.154080Z","iopub.execute_input":"2024-10-21T22:07:25.155264Z","iopub.status.idle":"2024-10-21T22:18:58.939972Z","shell.execute_reply.started":"2024-10-21T22:07:25.155218Z","shell.execute_reply":"2024-10-21T22:18:58.938672Z"}},"outputs":[{"name":"stdout","text":"Labels min: 0\nLabels max: 3\nLabels unique values: tensor([0, 1, 2, 3], device='cuda:0')\nLabels dtype: torch.int64\nEpoch 1/5, Training Loss: 1.2933\nValidation Accuracy: 0.4204\nBest model saved.\nEpoch 2/5, Training Loss: 1.2200\nValidation Accuracy: 0.4693\nBest model saved.\nEpoch 3/5, Training Loss: 1.1538\nValidation Accuracy: 0.4662\nEpoch 4/5, Training Loss: 1.0595\nValidation Accuracy: 0.4740\nBest model saved.\nEpoch 5/5, Training Loss: 0.8735\nValidation Accuracy: 0.4079\n","output_type":"stream"}],"execution_count":16},{"cell_type":"markdown","source":"# Evaluating Model","metadata":{}},{"cell_type":"code","source":"def evaluate(model, dataloader):\n    model.eval()\n    all_preds = []\n    all_labels = []\n    with torch.no_grad():\n        for batch in dataloader:\n            input_ids = batch['input_ids'].to(CFG.DEVICE)\n            attention_mask = batch['attention_mask'].to(CFG.DEVICE)\n            images = batch['images'].to(CFG.DEVICE)\n            labels = batch['label'].to(CFG.DEVICE)\n            labels = labels.long()\n\n            outputs = model(input_ids, attention_mask, images)\n            _, preds = torch.max(outputs, dim=1)\n\n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n\n    # Calculate metrics\n    accuracy = accuracy_score(all_labels, all_preds)\n    precision, recall, f1, _ = precision_recall_fscore_support(\n        all_labels, all_preds, average='weighted'\n    )\n    cm = confusion_matrix(all_labels, all_preds)\n\n    print(f\"Accuracy: {accuracy:.4f}\")\n    print(f\"Precision: {precision:.4f}, Recall: {recall:.4f}, F1-Score: {f1:.4f}\")\n    print(\"Confusion Matrix:\")\n    print(cm)\n\n    return accuracy, precision, recall, f1, cm\n\n# Evaluate on validation set\nevaluate(model, val_dataloader)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:18:58.942794Z","iopub.execute_input":"2024-10-21T22:18:58.943631Z","iopub.status.idle":"2024-10-21T22:19:24.548665Z","shell.execute_reply.started":"2024-10-21T22:18:58.943586Z","shell.execute_reply":"2024-10-21T22:19:24.547594Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.4079\nPrecision: 0.4372, Recall: 0.4079, F1-Score: 0.4037\nConfusion Matrix:\n[[116  94  13  19]\n [ 86 179  29  48]\n [ 56 113  51  51]\n [ 77 131  45 179]]\n","output_type":"stream"},{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"(0.40792540792540793,\n 0.43723611750515334,\n 0.40792540792540793,\n 0.4037054943548988,\n array([[116,  94,  13,  19],\n        [ 86, 179,  29,  48],\n        [ 56, 113,  51,  51],\n        [ 77, 131,  45, 179]]))"},"metadata":{}}],"execution_count":17},{"cell_type":"markdown","source":"# Making Predictions on the Test Data","metadata":{}},{"cell_type":"markdown","source":"## Preparing the test dataset","metadata":{}},{"cell_type":"code","source":"# Create test dataset\ntest_dataset = MultimodalDataset(\n    text_data=test_text_data,\n    labels=None,  # No labels provided\n    id_to_images=test_id_to_images,\n    tokenizer=tokenizer,\n    transform=image_transforms,\n    max_length=CFG.MAX_LENGTH\n)\n\ntest_dataloader = DataLoader(\n    test_dataset,\n    batch_size=CFG.BATCH_SIZE,\n    shuffle=False,\n    collate_fn=collate_fn,\n    num_workers=4,\n    pin_memory=True\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:19:24.550336Z","iopub.execute_input":"2024-10-21T22:19:24.550670Z","iopub.status.idle":"2024-10-21T22:19:24.556224Z","shell.execute_reply.started":"2024-10-21T22:19:24.550634Z","shell.execute_reply":"2024-10-21T22:19:24.555328Z"}},"outputs":[],"execution_count":18},{"cell_type":"markdown","source":"## Loading the best model","metadata":{}},{"cell_type":"code","source":"# Load the saved best model\nmodel.load_state_dict(torch.load('best_model.pth'))\nmodel.to(CFG.DEVICE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:19:24.558724Z","iopub.execute_input":"2024-10-21T22:19:24.559091Z","iopub.status.idle":"2024-10-21T22:19:24.901603Z","shell.execute_reply.started":"2024-10-21T22:19:24.559050Z","shell.execute_reply":"2024-10-21T22:19:24.900680Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"MultimodalModel(\n  (text_model): TextModel(\n    (roberta): RobertaModel(\n      (embeddings): RobertaEmbeddings(\n        (word_embeddings): Embedding(50265, 768, padding_idx=1)\n        (position_embeddings): Embedding(514, 768, padding_idx=1)\n        (token_type_embeddings): Embedding(1, 768)\n        (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n        (dropout): Dropout(p=0.1, inplace=False)\n      )\n      (encoder): RobertaEncoder(\n        (layer): ModuleList(\n          (0-5): 6 x RobertaLayer(\n            (attention): RobertaAttention(\n              (self): RobertaSdpaSelfAttention(\n                (query): Linear(in_features=768, out_features=768, bias=True)\n                (key): Linear(in_features=768, out_features=768, bias=True)\n                (value): Linear(in_features=768, out_features=768, bias=True)\n                (dropout): Dropout(p=0.1, inplace=False)\n              )\n              (output): RobertaSelfOutput(\n                (dense): Linear(in_features=768, out_features=768, bias=True)\n                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n                (dropout): Dropout(p=0.1, inplace=False)\n              )\n            )\n            (intermediate): RobertaIntermediate(\n              (dense): Linear(in_features=768, out_features=3072, bias=True)\n              (intermediate_act_fn): GELUActivation()\n            )\n            (output): RobertaOutput(\n              (dense): Linear(in_features=3072, out_features=768, bias=True)\n              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n        )\n      )\n      (pooler): RobertaPooler(\n        (dense): Linear(in_features=768, out_features=768, bias=True)\n        (activation): Tanh()\n      )\n    )\n    (dropout): Dropout(p=0.3, inplace=False)\n    (fc): Linear(in_features=768, out_features=256, bias=True)\n  )\n  (image_model): ImageModel(\n    (model): ResNet(\n      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (relu): ReLU(inplace=True)\n      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (layer1): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (layer2): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (layer3): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (layer4): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n      (fc): Identity()\n    )\n  )\n  (classifier): Sequential(\n    (0): Linear(in_features=768, out_features=128, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.5, inplace=False)\n    (3): Linear(in_features=128, out_features=4, bias=True)\n  )\n)"},"metadata":{}}],"execution_count":19},{"cell_type":"markdown","source":"# Defining the prediction function","metadata":{}},{"cell_type":"code","source":"def predict(model, dataloader):\n    model.eval()\n    predictions = {}\n    with torch.no_grad():\n        for batch in dataloader:\n            ids = batch['id']\n            input_ids = batch['input_ids'].to(CFG.DEVICE)\n            attention_mask = batch['attention_mask'].to(CFG.DEVICE)\n            images = batch['images'].to(CFG.DEVICE)\n\n            outputs = model(input_ids, attention_mask, images)\n            _, preds = torch.max(outputs, dim=1)\n            preds = preds.cpu().numpy() + 1  # Adjust back to [1, 4]\n\n            for id_, pred in zip(ids, preds):\n                predictions[id_] = pred\n\n    return predictions\n\n# Run predictions on test data\ntest_predictions = predict(model, test_dataloader)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:19:24.903019Z","iopub.execute_input":"2024-10-21T22:19:24.903344Z","iopub.status.idle":"2024-10-21T22:20:11.716769Z","shell.execute_reply.started":"2024-10-21T22:19:24.903311Z","shell.execute_reply":"2024-10-21T22:20:11.715672Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Generating the submission file","metadata":{}},{"cell_type":"code","source":"# Convert predictions to DataFrame\nsubmission_df = pd.DataFrame(list(test_predictions.items()), columns=['PetID', 'AdoptionSpeed'])\n\n# Ensure AdoptionSpeed is integer\nsubmission_df['AdoptionSpeed'] = submission_df['AdoptionSpeed'].astype(int)\n\n# Save submission file\nsubmission_df.to_csv(os.path.join(CFG.OUTPUT_DIR, 'submission.csv'), index=False)\n\nprint(\"Submission file saved at:\", os.path.join(CFG.OUTPUT_DIR, 'submission.csv'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:25:29.313756Z","iopub.execute_input":"2024-10-21T22:25:29.314623Z","iopub.status.idle":"2024-10-21T22:25:29.334277Z","shell.execute_reply.started":"2024-10-21T22:25:29.314581Z","shell.execute_reply":"2024-10-21T22:25:29.333313Z"}},"outputs":[{"name":"stdout","text":"Submission file saved at: /kaggle/working/submission.csv\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"final_submission = submission_df\n\nprint(final_submission)\nfinal_submission.hist('AdoptionSpeed')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:31:00.251648Z","iopub.execute_input":"2024-10-21T22:31:00.252669Z","iopub.status.idle":"2024-10-21T22:31:00.609113Z","shell.execute_reply.started":"2024-10-21T22:31:00.252606Z","shell.execute_reply":"2024-10-21T22:31:00.608141Z"}},"outputs":[{"name":"stdout","text":"          PetID  AdoptionSpeed\n0     6697a7f62              4\n1     23b64fe21              2\n2     41e824cbe              4\n3     6c3d7237b              4\n4     97b0b5d92              4\n...         ...            ...\n1886  986e26eeb              2\n1887  9b2316d19              4\n1888  c60193e34              1\n1889  4f7a70728              3\n1890  9e758c0b0              1\n\n[1891 rows x 2 columns]\n","output_type":"stream"},{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"array([[<Axes: title={'center': 'AdoptionSpeed'}>]], dtype=object)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"final_submission.to_csv(os.path.join(CFG.OUTPUT_DIR, 'submission.csv'), index=False)\n\nprint(\"Submission file saved at:\", os.path.join(CFG.OUTPUT_DIR, 'submission.csv'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:25:17.255859Z","iopub.execute_input":"2024-10-21T22:25:17.256286Z","iopub.status.idle":"2024-10-21T22:25:17.294268Z","shell.execute_reply.started":"2024-10-21T22:25:17.256246Z","shell.execute_reply":"2024-10-21T22:25:17.292942Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[23], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mfinal_submission\u001b[49m\u001b[38;5;241m.\u001b[39mto_csv(os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(CFG\u001b[38;5;241m.\u001b[39mOUTPUT_DIR, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msubmission.csv\u001b[39m\u001b[38;5;124m'\u001b[39m), index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSubmission file saved at:\u001b[39m\u001b[38;5;124m\"\u001b[39m, os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(CFG\u001b[38;5;241m.\u001b[39mOUTPUT_DIR, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msubmission.csv\u001b[39m\u001b[38;5;124m'\u001b[39m))\n","\u001b[0;31mNameError\u001b[0m: name 'final_submission' is not defined"],"ename":"NameError","evalue":"name 'final_submission' is not defined","output_type":"error"}],"execution_count":23}]}